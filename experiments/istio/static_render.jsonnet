{
  security+: { v1beta1+: {
    authorizationPolicy+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withAction(value): { spec+: { action: value } },
        withProvider(value): { spec+: { provider: value } },
        withProviderMixin(value): { spec+: { provider+: value } },
        provider+: {
          withName(value): { spec+: { provider+: { name: value } } },
        },
        rules+: {
          from+: {
            withSource(value): { source: value },
            withSourceMixin(value): { source+: value },
            source+: {
              ipBlocks+: { newString(value): value },
              withIpBlocks(value): { source+: { ipBlocks: if std.isArray(value) then value else [value] } },
              withIpBlocksMixin(value): { source+: { ipBlocks+: if std.isArray(value) then value else [value] } },
              namespaces+: { newString(value): value },
              withNamespaces(value): { source+: { namespaces: if std.isArray(value) then value else [value] } },
              withNamespacesMixin(value): { source+: { namespaces+: if std.isArray(value) then value else [value] } },
              notIpBlocks+: { newString(value): value },
              withNotIpBlocks(value): { source+: { notIpBlocks: if std.isArray(value) then value else [value] } },
              withNotIpBlocksMixin(value): { source+: { notIpBlocks+: if std.isArray(value) then value else [value] } },
              notNamespaces+: { newString(value): value },
              withNotNamespaces(value): { source+: { notNamespaces: if std.isArray(value) then value else [value] } },
              withNotNamespacesMixin(value): { source+: { notNamespaces+: if std.isArray(value) then value else [value] } },
              notPrincipals+: { newString(value): value },
              withNotPrincipals(value): { source+: { notPrincipals: if std.isArray(value) then value else [value] } },
              withNotPrincipalsMixin(value): { source+: { notPrincipals+: if std.isArray(value) then value else [value] } },
              notRemoteIpBlocks+: { newString(value): value },
              withNotRemoteIpBlocks(value): { source+: { notRemoteIpBlocks: if std.isArray(value) then value else [value] } },
              withNotRemoteIpBlocksMixin(value): { source+: { notRemoteIpBlocks+: if std.isArray(value) then value else [value] } },
              notRequestPrincipals+: { newString(value): value },
              withNotRequestPrincipals(value): { source+: { notRequestPrincipals: if std.isArray(value) then value else [value] } },
              withNotRequestPrincipalsMixin(value): { source+: { notRequestPrincipals+: if std.isArray(value) then value else [value] } },
              principals+: { newString(value): value },
              withPrincipals(value): { source+: { principals: if std.isArray(value) then value else [value] } },
              withPrincipalsMixin(value): { source+: { principals+: if std.isArray(value) then value else [value] } },
              remoteIpBlocks+: { newString(value): value },
              withRemoteIpBlocks(value): { source+: { remoteIpBlocks: if std.isArray(value) then value else [value] } },
              withRemoteIpBlocksMixin(value): { source+: { remoteIpBlocks+: if std.isArray(value) then value else [value] } },
              requestPrincipals+: { newString(value): value },
              withRequestPrincipals(value): { source+: { requestPrincipals: if std.isArray(value) then value else [value] } },
              withRequestPrincipalsMixin(value): { source+: { requestPrincipals+: if std.isArray(value) then value else [value] } },
            },
          },
          withFrom(value): { from: if std.isArray(value) then value else [value] },
          withFromMixin(value): { from+: if std.isArray(value) then value else [value] },
          to+: {
            withOperation(value): { operation: value },
            withOperationMixin(value): { operation+: value },
            operation+: {
              hosts+: { newString(value): value },
              withHosts(value): { operation+: { hosts: if std.isArray(value) then value else [value] } },
              withHostsMixin(value): { operation+: { hosts+: if std.isArray(value) then value else [value] } },
              methods+: { newString(value): value },
              withMethods(value): { operation+: { methods: if std.isArray(value) then value else [value] } },
              withMethodsMixin(value): { operation+: { methods+: if std.isArray(value) then value else [value] } },
              notHosts+: { newString(value): value },
              withNotHosts(value): { operation+: { notHosts: if std.isArray(value) then value else [value] } },
              withNotHostsMixin(value): { operation+: { notHosts+: if std.isArray(value) then value else [value] } },
              notMethods+: { newString(value): value },
              withNotMethods(value): { operation+: { notMethods: if std.isArray(value) then value else [value] } },
              withNotMethodsMixin(value): { operation+: { notMethods+: if std.isArray(value) then value else [value] } },
              notPaths+: { newString(value): value },
              withNotPaths(value): { operation+: { notPaths: if std.isArray(value) then value else [value] } },
              withNotPathsMixin(value): { operation+: { notPaths+: if std.isArray(value) then value else [value] } },
              notPorts+: { newString(value): value },
              withNotPorts(value): { operation+: { notPorts: if std.isArray(value) then value else [value] } },
              withNotPortsMixin(value): { operation+: { notPorts+: if std.isArray(value) then value else [value] } },
              paths+: { newString(value): value },
              withPaths(value): { operation+: { paths: if std.isArray(value) then value else [value] } },
              withPathsMixin(value): { operation+: { paths+: if std.isArray(value) then value else [value] } },
              ports+: { newString(value): value },
              withPorts(value): { operation+: { ports: if std.isArray(value) then value else [value] } },
              withPortsMixin(value): { operation+: { ports+: if std.isArray(value) then value else [value] } },
            },
          },
          withTo(value): { to: if std.isArray(value) then value else [value] },
          withToMixin(value): { to+: if std.isArray(value) then value else [value] },
          when+: {
            withKey(value): { key: value },
            notValues+: { newString(value): value },
            withNotValues(value): { notValues: if std.isArray(value) then value else [value] },
            withNotValuesMixin(value): { notValues+: if std.isArray(value) then value else [value] },
            values+: { newString(value): value },
            withValues(value): { values: if std.isArray(value) then value else [value] },
            withValuesMixin(value): { values+: if std.isArray(value) then value else [value] },
          },
          withWhen(value): { when: if std.isArray(value) then value else [value] },
          withWhenMixin(value): { when+: if std.isArray(value) then value else [value] },
        },
        withRules(value): { spec+: { rules: if std.isArray(value) then value else [value] } },
        withRulesMixin(value): { spec+: { rules+: if std.isArray(value) then value else [value] } },
        withSelector(value): { spec+: { selector: value } },
        withSelectorMixin(value): { spec+: { selector+: value } },
        selector+: {
          withMatchLabels(value): { spec+: { selector+: { matchLabels: value } } },
          withMatchLabelsMixin(value): { spec+: { selector+: { matchLabels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  security+: { v1beta1+: { authorizationPolicy+: {
    new(name):
      self.withApiVersion('security.istio.io/v1beta1')
      + self.withKind('AuthorizationPolicy')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    destinationRule+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        exportTo+: { newString(value): value },
        withExportTo(value): { spec+: { exportTo: if std.isArray(value) then value else [value] } },
        withExportToMixin(value): { spec+: { exportTo+: if std.isArray(value) then value else [value] } },
        withHost(value): { spec+: { host: value } },
        subsets+: {
          withLabels(value): { labels: value },
          withLabelsMixin(value): { labels+: value },
          withName(value): { name: value },
          withTrafficPolicy(value): { trafficPolicy: value },
          withTrafficPolicyMixin(value): { trafficPolicy+: value },
          trafficPolicy+: {
            withConnectionPool(value): { trafficPolicy+: { connectionPool: value } },
            withConnectionPoolMixin(value): { trafficPolicy+: { connectionPool+: value } },
            connectionPool+: {
              withHttp(value): { trafficPolicy+: { connectionPool+: { http: value } } },
              withHttpMixin(value): { trafficPolicy+: { connectionPool+: { http+: value } } },
              http+: {
                withH2UpgradePolicy(value): { trafficPolicy+: { connectionPool+: { http+: { h2UpgradePolicy: value } } } },
                withHttp1MaxPendingRequests(value): { trafficPolicy+: { connectionPool+: { http+: { http1MaxPendingRequests: value } } } },
                withHttp2MaxRequests(value): { trafficPolicy+: { connectionPool+: { http+: { http2MaxRequests: value } } } },
                withIdleTimeout(value): { trafficPolicy+: { connectionPool+: { http+: { idleTimeout: value } } } },
                withMaxRequestsPerConnection(value): { trafficPolicy+: { connectionPool+: { http+: { maxRequestsPerConnection: value } } } },
                withMaxRetries(value): { trafficPolicy+: { connectionPool+: { http+: { maxRetries: value } } } },
                withUseClientProtocol(value): { trafficPolicy+: { connectionPool+: { http+: { useClientProtocol: value } } } },
              },
              withTcp(value): { trafficPolicy+: { connectionPool+: { tcp: value } } },
              withTcpMixin(value): { trafficPolicy+: { connectionPool+: { tcp+: value } } },
              tcp+: {
                withConnectTimeout(value): { trafficPolicy+: { connectionPool+: { tcp+: { connectTimeout: value } } } },
                withMaxConnections(value): { trafficPolicy+: { connectionPool+: { tcp+: { maxConnections: value } } } },
                withTcpKeepalive(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive: value } } } },
                withTcpKeepaliveMixin(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: value } } } },
                tcpKeepalive+: {
                  withInterval(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } } },
                  withProbes(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } } },
                  withTime(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } } },
                },
              },
            },
            withLoadBalancer(value): { trafficPolicy+: { loadBalancer: value } },
            withLoadBalancerMixin(value): { trafficPolicy+: { loadBalancer+: value } },
            loadBalancer+: {
              withConsistentHash(value): { trafficPolicy+: { loadBalancer+: { consistentHash: value } } },
              withConsistentHashMixin(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: value } } },
              consistentHash+: {
                withHttpCookie(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie: value } } } },
                withHttpCookieMixin(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: value } } } },
                httpCookie+: {
                  withName(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } } },
                  withPath(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } } },
                  withTtl(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } } },
                },
                withHttpHeaderName(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpHeaderName: value } } } },
                withHttpQueryParameterName(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } } },
                withMinimumRingSize(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { minimumRingSize: value } } } },
                withUseSourceIp(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { useSourceIp: value } } } },
              },
              withLocalityLbSetting(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting: value } } },
              withLocalityLbSettingMixin(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: value } } },
              localityLbSetting+: {
                distribute+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                  withToMixin(value): { to+: value },
                },
                withDistribute(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } } },
                withDistributeMixin(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } } },
                withEnabled(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { enabled: value } } } },
                failover+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                },
                withFailover(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } } },
                withFailoverMixin(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } } },
              },
              withSimple(value): { trafficPolicy+: { loadBalancer+: { simple: value } } },
            },
            withOutlierDetection(value): { trafficPolicy+: { outlierDetection: value } },
            withOutlierDetectionMixin(value): { trafficPolicy+: { outlierDetection+: value } },
            outlierDetection+: {
              withBaseEjectionTime(value): { trafficPolicy+: { outlierDetection+: { baseEjectionTime: value } } },
              withConsecutive5xxErrors(value): { trafficPolicy+: { outlierDetection+: { consecutive5xxErrors: value } } },
              withConsecutiveErrors(value): { trafficPolicy+: { outlierDetection+: { consecutiveErrors: value } } },
              withConsecutiveGatewayErrors(value): { trafficPolicy+: { outlierDetection+: { consecutiveGatewayErrors: value } } },
              withInterval(value): { trafficPolicy+: { outlierDetection+: { interval: value } } },
              withMaxEjectionPercent(value): { trafficPolicy+: { outlierDetection+: { maxEjectionPercent: value } } },
              withMinHealthPercent(value): { trafficPolicy+: { outlierDetection+: { minHealthPercent: value } } },
            },
            portLevelSettings+: {
              withConnectionPool(value): { connectionPool: value },
              withConnectionPoolMixin(value): { connectionPool+: value },
              connectionPool+: {
                withHttp(value): { connectionPool+: { http: value } },
                withHttpMixin(value): { connectionPool+: { http+: value } },
                http+: {
                  withH2UpgradePolicy(value): { connectionPool+: { http+: { h2UpgradePolicy: value } } },
                  withHttp1MaxPendingRequests(value): { connectionPool+: { http+: { http1MaxPendingRequests: value } } },
                  withHttp2MaxRequests(value): { connectionPool+: { http+: { http2MaxRequests: value } } },
                  withIdleTimeout(value): { connectionPool+: { http+: { idleTimeout: value } } },
                  withMaxRequestsPerConnection(value): { connectionPool+: { http+: { maxRequestsPerConnection: value } } },
                  withMaxRetries(value): { connectionPool+: { http+: { maxRetries: value } } },
                  withUseClientProtocol(value): { connectionPool+: { http+: { useClientProtocol: value } } },
                },
                withTcp(value): { connectionPool+: { tcp: value } },
                withTcpMixin(value): { connectionPool+: { tcp+: value } },
                tcp+: {
                  withConnectTimeout(value): { connectionPool+: { tcp+: { connectTimeout: value } } },
                  withMaxConnections(value): { connectionPool+: { tcp+: { maxConnections: value } } },
                  withTcpKeepalive(value): { connectionPool+: { tcp+: { tcpKeepalive: value } } },
                  withTcpKeepaliveMixin(value): { connectionPool+: { tcp+: { tcpKeepalive+: value } } },
                  tcpKeepalive+: {
                    withInterval(value): { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } },
                    withProbes(value): { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } },
                    withTime(value): { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } },
                  },
                },
              },
              withLoadBalancer(value): { loadBalancer: value },
              withLoadBalancerMixin(value): { loadBalancer+: value },
              loadBalancer+: {
                withConsistentHash(value): { loadBalancer+: { consistentHash: value } },
                withConsistentHashMixin(value): { loadBalancer+: { consistentHash+: value } },
                consistentHash+: {
                  withHttpCookie(value): { loadBalancer+: { consistentHash+: { httpCookie: value } } },
                  withHttpCookieMixin(value): { loadBalancer+: { consistentHash+: { httpCookie+: value } } },
                  httpCookie+: {
                    withName(value): { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } },
                    withPath(value): { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } },
                    withTtl(value): { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } },
                  },
                  withHttpHeaderName(value): { loadBalancer+: { consistentHash+: { httpHeaderName: value } } },
                  withHttpQueryParameterName(value): { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } },
                  withMinimumRingSize(value): { loadBalancer+: { consistentHash+: { minimumRingSize: value } } },
                  withUseSourceIp(value): { loadBalancer+: { consistentHash+: { useSourceIp: value } } },
                },
                withLocalityLbSetting(value): { loadBalancer+: { localityLbSetting: value } },
                withLocalityLbSettingMixin(value): { loadBalancer+: { localityLbSetting+: value } },
                localityLbSetting+: {
                  distribute+: {
                    withFrom(value): { from: value },
                    withTo(value): { to: value },
                    withToMixin(value): { to+: value },
                  },
                  withDistribute(value): { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } },
                  withDistributeMixin(value): { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } },
                  withEnabled(value): { loadBalancer+: { localityLbSetting+: { enabled: value } } },
                  failover+: {
                    withFrom(value): { from: value },
                    withTo(value): { to: value },
                  },
                  withFailover(value): { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } },
                  withFailoverMixin(value): { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } },
                },
                withSimple(value): { loadBalancer+: { simple: value } },
              },
              withOutlierDetection(value): { outlierDetection: value },
              withOutlierDetectionMixin(value): { outlierDetection+: value },
              outlierDetection+: {
                withBaseEjectionTime(value): { outlierDetection+: { baseEjectionTime: value } },
                withConsecutive5xxErrors(value): { outlierDetection+: { consecutive5xxErrors: value } },
                withConsecutiveErrors(value): { outlierDetection+: { consecutiveErrors: value } },
                withConsecutiveGatewayErrors(value): { outlierDetection+: { consecutiveGatewayErrors: value } },
                withInterval(value): { outlierDetection+: { interval: value } },
                withMaxEjectionPercent(value): { outlierDetection+: { maxEjectionPercent: value } },
                withMinHealthPercent(value): { outlierDetection+: { minHealthPercent: value } },
              },
              withPort(value): { port: value },
              withPortMixin(value): { port+: value },
              port+: {
                withNumber(value): { port+: { number: value } },
              },
              withTls(value): { tls: value },
              withTlsMixin(value): { tls+: value },
              tls+: {
                withCaCertificates(value): { tls+: { caCertificates: value } },
                withClientCertificate(value): { tls+: { clientCertificate: value } },
                withCredentialName(value): { tls+: { credentialName: value } },
                withMode(value): { tls+: { mode: value } },
                withPrivateKey(value): { tls+: { privateKey: value } },
                withSni(value): { tls+: { sni: value } },
                subjectAltNames+: { newString(value): value },
                withSubjectAltNames(value): { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } },
                withSubjectAltNamesMixin(value): { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
              },
            },
            withPortLevelSettings(value): { trafficPolicy+: { portLevelSettings: if std.isArray(value) then value else [value] } },
            withPortLevelSettingsMixin(value): { trafficPolicy+: { portLevelSettings+: if std.isArray(value) then value else [value] } },
            withTls(value): { trafficPolicy+: { tls: value } },
            withTlsMixin(value): { trafficPolicy+: { tls+: value } },
            tls+: {
              withCaCertificates(value): { trafficPolicy+: { tls+: { caCertificates: value } } },
              withClientCertificate(value): { trafficPolicy+: { tls+: { clientCertificate: value } } },
              withCredentialName(value): { trafficPolicy+: { tls+: { credentialName: value } } },
              withMode(value): { trafficPolicy+: { tls+: { mode: value } } },
              withPrivateKey(value): { trafficPolicy+: { tls+: { privateKey: value } } },
              withSni(value): { trafficPolicy+: { tls+: { sni: value } } },
              subjectAltNames+: { newString(value): value },
              withSubjectAltNames(value): { trafficPolicy+: { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } } },
              withSubjectAltNamesMixin(value): { trafficPolicy+: { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } } },
            },
          },
        },
        withSubsets(value): { spec+: { subsets: if std.isArray(value) then value else [value] } },
        withSubsetsMixin(value): { spec+: { subsets+: if std.isArray(value) then value else [value] } },
        withTrafficPolicy(value): { spec+: { trafficPolicy: value } },
        withTrafficPolicyMixin(value): { spec+: { trafficPolicy+: value } },
        trafficPolicy+: {
          withConnectionPool(value): { spec+: { trafficPolicy+: { connectionPool: value } } },
          withConnectionPoolMixin(value): { spec+: { trafficPolicy+: { connectionPool+: value } } },
          connectionPool+: {
            withHttp(value): { spec+: { trafficPolicy+: { connectionPool+: { http: value } } } },
            withHttpMixin(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: value } } } },
            http+: {
              withH2UpgradePolicy(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { h2UpgradePolicy: value } } } } },
              withHttp1MaxPendingRequests(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { http1MaxPendingRequests: value } } } } },
              withHttp2MaxRequests(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { http2MaxRequests: value } } } } },
              withIdleTimeout(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { idleTimeout: value } } } } },
              withMaxRequestsPerConnection(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { maxRequestsPerConnection: value } } } } },
              withMaxRetries(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { maxRetries: value } } } } },
              withUseClientProtocol(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { useClientProtocol: value } } } } },
            },
            withTcp(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp: value } } } },
            withTcpMixin(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: value } } } },
            tcp+: {
              withConnectTimeout(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { connectTimeout: value } } } } },
              withMaxConnections(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { maxConnections: value } } } } },
              withTcpKeepalive(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive: value } } } } },
              withTcpKeepaliveMixin(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: value } } } } },
              tcpKeepalive+: {
                withInterval(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } } } },
                withProbes(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } } } },
                withTime(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } } } },
              },
            },
          },
          withLoadBalancer(value): { spec+: { trafficPolicy+: { loadBalancer: value } } },
          withLoadBalancerMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: value } } },
          loadBalancer+: {
            withConsistentHash(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash: value } } } },
            withConsistentHashMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: value } } } },
            consistentHash+: {
              withHttpCookie(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie: value } } } } },
              withHttpCookieMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: value } } } } },
              httpCookie+: {
                withName(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } } } },
                withPath(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } } } },
                withTtl(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } } } },
              },
              withHttpHeaderName(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpHeaderName: value } } } } },
              withHttpQueryParameterName(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } } } },
              withMinimumRingSize(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { minimumRingSize: value } } } } },
              withUseSourceIp(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { useSourceIp: value } } } } },
            },
            withLocalityLbSetting(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting: value } } } },
            withLocalityLbSettingMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: value } } } },
            localityLbSetting+: {
              distribute+: {
                withFrom(value): { from: value },
                withTo(value): { to: value },
                withToMixin(value): { to+: value },
              },
              withDistribute(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } } } },
              withDistributeMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } } } },
              withEnabled(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { enabled: value } } } } },
              failover+: {
                withFrom(value): { from: value },
                withTo(value): { to: value },
              },
              withFailover(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } } } },
              withFailoverMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } } } },
            },
            withSimple(value): { spec+: { trafficPolicy+: { loadBalancer+: { simple: value } } } },
          },
          withOutlierDetection(value): { spec+: { trafficPolicy+: { outlierDetection: value } } },
          withOutlierDetectionMixin(value): { spec+: { trafficPolicy+: { outlierDetection+: value } } },
          outlierDetection+: {
            withBaseEjectionTime(value): { spec+: { trafficPolicy+: { outlierDetection+: { baseEjectionTime: value } } } },
            withConsecutive5xxErrors(value): { spec+: { trafficPolicy+: { outlierDetection+: { consecutive5xxErrors: value } } } },
            withConsecutiveErrors(value): { spec+: { trafficPolicy+: { outlierDetection+: { consecutiveErrors: value } } } },
            withConsecutiveGatewayErrors(value): { spec+: { trafficPolicy+: { outlierDetection+: { consecutiveGatewayErrors: value } } } },
            withInterval(value): { spec+: { trafficPolicy+: { outlierDetection+: { interval: value } } } },
            withMaxEjectionPercent(value): { spec+: { trafficPolicy+: { outlierDetection+: { maxEjectionPercent: value } } } },
            withMinHealthPercent(value): { spec+: { trafficPolicy+: { outlierDetection+: { minHealthPercent: value } } } },
          },
          portLevelSettings+: {
            withConnectionPool(value): { connectionPool: value },
            withConnectionPoolMixin(value): { connectionPool+: value },
            connectionPool+: {
              withHttp(value): { connectionPool+: { http: value } },
              withHttpMixin(value): { connectionPool+: { http+: value } },
              http+: {
                withH2UpgradePolicy(value): { connectionPool+: { http+: { h2UpgradePolicy: value } } },
                withHttp1MaxPendingRequests(value): { connectionPool+: { http+: { http1MaxPendingRequests: value } } },
                withHttp2MaxRequests(value): { connectionPool+: { http+: { http2MaxRequests: value } } },
                withIdleTimeout(value): { connectionPool+: { http+: { idleTimeout: value } } },
                withMaxRequestsPerConnection(value): { connectionPool+: { http+: { maxRequestsPerConnection: value } } },
                withMaxRetries(value): { connectionPool+: { http+: { maxRetries: value } } },
                withUseClientProtocol(value): { connectionPool+: { http+: { useClientProtocol: value } } },
              },
              withTcp(value): { connectionPool+: { tcp: value } },
              withTcpMixin(value): { connectionPool+: { tcp+: value } },
              tcp+: {
                withConnectTimeout(value): { connectionPool+: { tcp+: { connectTimeout: value } } },
                withMaxConnections(value): { connectionPool+: { tcp+: { maxConnections: value } } },
                withTcpKeepalive(value): { connectionPool+: { tcp+: { tcpKeepalive: value } } },
                withTcpKeepaliveMixin(value): { connectionPool+: { tcp+: { tcpKeepalive+: value } } },
                tcpKeepalive+: {
                  withInterval(value): { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } },
                  withProbes(value): { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } },
                  withTime(value): { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } },
                },
              },
            },
            withLoadBalancer(value): { loadBalancer: value },
            withLoadBalancerMixin(value): { loadBalancer+: value },
            loadBalancer+: {
              withConsistentHash(value): { loadBalancer+: { consistentHash: value } },
              withConsistentHashMixin(value): { loadBalancer+: { consistentHash+: value } },
              consistentHash+: {
                withHttpCookie(value): { loadBalancer+: { consistentHash+: { httpCookie: value } } },
                withHttpCookieMixin(value): { loadBalancer+: { consistentHash+: { httpCookie+: value } } },
                httpCookie+: {
                  withName(value): { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } },
                  withPath(value): { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } },
                  withTtl(value): { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } },
                },
                withHttpHeaderName(value): { loadBalancer+: { consistentHash+: { httpHeaderName: value } } },
                withHttpQueryParameterName(value): { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } },
                withMinimumRingSize(value): { loadBalancer+: { consistentHash+: { minimumRingSize: value } } },
                withUseSourceIp(value): { loadBalancer+: { consistentHash+: { useSourceIp: value } } },
              },
              withLocalityLbSetting(value): { loadBalancer+: { localityLbSetting: value } },
              withLocalityLbSettingMixin(value): { loadBalancer+: { localityLbSetting+: value } },
              localityLbSetting+: {
                distribute+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                  withToMixin(value): { to+: value },
                },
                withDistribute(value): { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } },
                withDistributeMixin(value): { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } },
                withEnabled(value): { loadBalancer+: { localityLbSetting+: { enabled: value } } },
                failover+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                },
                withFailover(value): { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } },
                withFailoverMixin(value): { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } },
              },
              withSimple(value): { loadBalancer+: { simple: value } },
            },
            withOutlierDetection(value): { outlierDetection: value },
            withOutlierDetectionMixin(value): { outlierDetection+: value },
            outlierDetection+: {
              withBaseEjectionTime(value): { outlierDetection+: { baseEjectionTime: value } },
              withConsecutive5xxErrors(value): { outlierDetection+: { consecutive5xxErrors: value } },
              withConsecutiveErrors(value): { outlierDetection+: { consecutiveErrors: value } },
              withConsecutiveGatewayErrors(value): { outlierDetection+: { consecutiveGatewayErrors: value } },
              withInterval(value): { outlierDetection+: { interval: value } },
              withMaxEjectionPercent(value): { outlierDetection+: { maxEjectionPercent: value } },
              withMinHealthPercent(value): { outlierDetection+: { minHealthPercent: value } },
            },
            withPort(value): { port: value },
            withPortMixin(value): { port+: value },
            port+: {
              withNumber(value): { port+: { number: value } },
            },
            withTls(value): { tls: value },
            withTlsMixin(value): { tls+: value },
            tls+: {
              withCaCertificates(value): { tls+: { caCertificates: value } },
              withClientCertificate(value): { tls+: { clientCertificate: value } },
              withCredentialName(value): { tls+: { credentialName: value } },
              withMode(value): { tls+: { mode: value } },
              withPrivateKey(value): { tls+: { privateKey: value } },
              withSni(value): { tls+: { sni: value } },
              subjectAltNames+: { newString(value): value },
              withSubjectAltNames(value): { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } },
              withSubjectAltNamesMixin(value): { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
            },
          },
          withPortLevelSettings(value): { spec+: { trafficPolicy+: { portLevelSettings: if std.isArray(value) then value else [value] } } },
          withPortLevelSettingsMixin(value): { spec+: { trafficPolicy+: { portLevelSettings+: if std.isArray(value) then value else [value] } } },
          withTls(value): { spec+: { trafficPolicy+: { tls: value } } },
          withTlsMixin(value): { spec+: { trafficPolicy+: { tls+: value } } },
          tls+: {
            withCaCertificates(value): { spec+: { trafficPolicy+: { tls+: { caCertificates: value } } } },
            withClientCertificate(value): { spec+: { trafficPolicy+: { tls+: { clientCertificate: value } } } },
            withCredentialName(value): { spec+: { trafficPolicy+: { tls+: { credentialName: value } } } },
            withMode(value): { spec+: { trafficPolicy+: { tls+: { mode: value } } } },
            withPrivateKey(value): { spec+: { trafficPolicy+: { tls+: { privateKey: value } } } },
            withSni(value): { spec+: { trafficPolicy+: { tls+: { sni: value } } } },
            subjectAltNames+: { newString(value): value },
            withSubjectAltNames(value): { spec+: { trafficPolicy+: { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } } } },
            withSubjectAltNamesMixin(value): { spec+: { trafficPolicy+: { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } } } },
          },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { destinationRule+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('DestinationRule')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1beta1+: {
    destinationRule+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        exportTo+: { newString(value): value },
        withExportTo(value): { spec+: { exportTo: if std.isArray(value) then value else [value] } },
        withExportToMixin(value): { spec+: { exportTo+: if std.isArray(value) then value else [value] } },
        withHost(value): { spec+: { host: value } },
        subsets+: {
          withLabels(value): { labels: value },
          withLabelsMixin(value): { labels+: value },
          withName(value): { name: value },
          withTrafficPolicy(value): { trafficPolicy: value },
          withTrafficPolicyMixin(value): { trafficPolicy+: value },
          trafficPolicy+: {
            withConnectionPool(value): { trafficPolicy+: { connectionPool: value } },
            withConnectionPoolMixin(value): { trafficPolicy+: { connectionPool+: value } },
            connectionPool+: {
              withHttp(value): { trafficPolicy+: { connectionPool+: { http: value } } },
              withHttpMixin(value): { trafficPolicy+: { connectionPool+: { http+: value } } },
              http+: {
                withH2UpgradePolicy(value): { trafficPolicy+: { connectionPool+: { http+: { h2UpgradePolicy: value } } } },
                withHttp1MaxPendingRequests(value): { trafficPolicy+: { connectionPool+: { http+: { http1MaxPendingRequests: value } } } },
                withHttp2MaxRequests(value): { trafficPolicy+: { connectionPool+: { http+: { http2MaxRequests: value } } } },
                withIdleTimeout(value): { trafficPolicy+: { connectionPool+: { http+: { idleTimeout: value } } } },
                withMaxRequestsPerConnection(value): { trafficPolicy+: { connectionPool+: { http+: { maxRequestsPerConnection: value } } } },
                withMaxRetries(value): { trafficPolicy+: { connectionPool+: { http+: { maxRetries: value } } } },
                withUseClientProtocol(value): { trafficPolicy+: { connectionPool+: { http+: { useClientProtocol: value } } } },
              },
              withTcp(value): { trafficPolicy+: { connectionPool+: { tcp: value } } },
              withTcpMixin(value): { trafficPolicy+: { connectionPool+: { tcp+: value } } },
              tcp+: {
                withConnectTimeout(value): { trafficPolicy+: { connectionPool+: { tcp+: { connectTimeout: value } } } },
                withMaxConnections(value): { trafficPolicy+: { connectionPool+: { tcp+: { maxConnections: value } } } },
                withTcpKeepalive(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive: value } } } },
                withTcpKeepaliveMixin(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: value } } } },
                tcpKeepalive+: {
                  withInterval(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } } },
                  withProbes(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } } },
                  withTime(value): { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } } },
                },
              },
            },
            withLoadBalancer(value): { trafficPolicy+: { loadBalancer: value } },
            withLoadBalancerMixin(value): { trafficPolicy+: { loadBalancer+: value } },
            loadBalancer+: {
              withConsistentHash(value): { trafficPolicy+: { loadBalancer+: { consistentHash: value } } },
              withConsistentHashMixin(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: value } } },
              consistentHash+: {
                withHttpCookie(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie: value } } } },
                withHttpCookieMixin(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: value } } } },
                httpCookie+: {
                  withName(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } } },
                  withPath(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } } },
                  withTtl(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } } },
                },
                withHttpHeaderName(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpHeaderName: value } } } },
                withHttpQueryParameterName(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } } },
                withMinimumRingSize(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { minimumRingSize: value } } } },
                withUseSourceIp(value): { trafficPolicy+: { loadBalancer+: { consistentHash+: { useSourceIp: value } } } },
              },
              withLocalityLbSetting(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting: value } } },
              withLocalityLbSettingMixin(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: value } } },
              localityLbSetting+: {
                distribute+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                  withToMixin(value): { to+: value },
                },
                withDistribute(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } } },
                withDistributeMixin(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } } },
                withEnabled(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { enabled: value } } } },
                failover+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                },
                withFailover(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } } },
                withFailoverMixin(value): { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } } },
              },
              withSimple(value): { trafficPolicy+: { loadBalancer+: { simple: value } } },
            },
            withOutlierDetection(value): { trafficPolicy+: { outlierDetection: value } },
            withOutlierDetectionMixin(value): { trafficPolicy+: { outlierDetection+: value } },
            outlierDetection+: {
              withBaseEjectionTime(value): { trafficPolicy+: { outlierDetection+: { baseEjectionTime: value } } },
              withConsecutive5xxErrors(value): { trafficPolicy+: { outlierDetection+: { consecutive5xxErrors: value } } },
              withConsecutiveErrors(value): { trafficPolicy+: { outlierDetection+: { consecutiveErrors: value } } },
              withConsecutiveGatewayErrors(value): { trafficPolicy+: { outlierDetection+: { consecutiveGatewayErrors: value } } },
              withInterval(value): { trafficPolicy+: { outlierDetection+: { interval: value } } },
              withMaxEjectionPercent(value): { trafficPolicy+: { outlierDetection+: { maxEjectionPercent: value } } },
              withMinHealthPercent(value): { trafficPolicy+: { outlierDetection+: { minHealthPercent: value } } },
            },
            portLevelSettings+: {
              withConnectionPool(value): { connectionPool: value },
              withConnectionPoolMixin(value): { connectionPool+: value },
              connectionPool+: {
                withHttp(value): { connectionPool+: { http: value } },
                withHttpMixin(value): { connectionPool+: { http+: value } },
                http+: {
                  withH2UpgradePolicy(value): { connectionPool+: { http+: { h2UpgradePolicy: value } } },
                  withHttp1MaxPendingRequests(value): { connectionPool+: { http+: { http1MaxPendingRequests: value } } },
                  withHttp2MaxRequests(value): { connectionPool+: { http+: { http2MaxRequests: value } } },
                  withIdleTimeout(value): { connectionPool+: { http+: { idleTimeout: value } } },
                  withMaxRequestsPerConnection(value): { connectionPool+: { http+: { maxRequestsPerConnection: value } } },
                  withMaxRetries(value): { connectionPool+: { http+: { maxRetries: value } } },
                  withUseClientProtocol(value): { connectionPool+: { http+: { useClientProtocol: value } } },
                },
                withTcp(value): { connectionPool+: { tcp: value } },
                withTcpMixin(value): { connectionPool+: { tcp+: value } },
                tcp+: {
                  withConnectTimeout(value): { connectionPool+: { tcp+: { connectTimeout: value } } },
                  withMaxConnections(value): { connectionPool+: { tcp+: { maxConnections: value } } },
                  withTcpKeepalive(value): { connectionPool+: { tcp+: { tcpKeepalive: value } } },
                  withTcpKeepaliveMixin(value): { connectionPool+: { tcp+: { tcpKeepalive+: value } } },
                  tcpKeepalive+: {
                    withInterval(value): { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } },
                    withProbes(value): { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } },
                    withTime(value): { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } },
                  },
                },
              },
              withLoadBalancer(value): { loadBalancer: value },
              withLoadBalancerMixin(value): { loadBalancer+: value },
              loadBalancer+: {
                withConsistentHash(value): { loadBalancer+: { consistentHash: value } },
                withConsistentHashMixin(value): { loadBalancer+: { consistentHash+: value } },
                consistentHash+: {
                  withHttpCookie(value): { loadBalancer+: { consistentHash+: { httpCookie: value } } },
                  withHttpCookieMixin(value): { loadBalancer+: { consistentHash+: { httpCookie+: value } } },
                  httpCookie+: {
                    withName(value): { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } },
                    withPath(value): { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } },
                    withTtl(value): { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } },
                  },
                  withHttpHeaderName(value): { loadBalancer+: { consistentHash+: { httpHeaderName: value } } },
                  withHttpQueryParameterName(value): { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } },
                  withMinimumRingSize(value): { loadBalancer+: { consistentHash+: { minimumRingSize: value } } },
                  withUseSourceIp(value): { loadBalancer+: { consistentHash+: { useSourceIp: value } } },
                },
                withLocalityLbSetting(value): { loadBalancer+: { localityLbSetting: value } },
                withLocalityLbSettingMixin(value): { loadBalancer+: { localityLbSetting+: value } },
                localityLbSetting+: {
                  distribute+: {
                    withFrom(value): { from: value },
                    withTo(value): { to: value },
                    withToMixin(value): { to+: value },
                  },
                  withDistribute(value): { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } },
                  withDistributeMixin(value): { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } },
                  withEnabled(value): { loadBalancer+: { localityLbSetting+: { enabled: value } } },
                  failover+: {
                    withFrom(value): { from: value },
                    withTo(value): { to: value },
                  },
                  withFailover(value): { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } },
                  withFailoverMixin(value): { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } },
                },
                withSimple(value): { loadBalancer+: { simple: value } },
              },
              withOutlierDetection(value): { outlierDetection: value },
              withOutlierDetectionMixin(value): { outlierDetection+: value },
              outlierDetection+: {
                withBaseEjectionTime(value): { outlierDetection+: { baseEjectionTime: value } },
                withConsecutive5xxErrors(value): { outlierDetection+: { consecutive5xxErrors: value } },
                withConsecutiveErrors(value): { outlierDetection+: { consecutiveErrors: value } },
                withConsecutiveGatewayErrors(value): { outlierDetection+: { consecutiveGatewayErrors: value } },
                withInterval(value): { outlierDetection+: { interval: value } },
                withMaxEjectionPercent(value): { outlierDetection+: { maxEjectionPercent: value } },
                withMinHealthPercent(value): { outlierDetection+: { minHealthPercent: value } },
              },
              withPort(value): { port: value },
              withPortMixin(value): { port+: value },
              port+: {
                withNumber(value): { port+: { number: value } },
              },
              withTls(value): { tls: value },
              withTlsMixin(value): { tls+: value },
              tls+: {
                withCaCertificates(value): { tls+: { caCertificates: value } },
                withClientCertificate(value): { tls+: { clientCertificate: value } },
                withCredentialName(value): { tls+: { credentialName: value } },
                withMode(value): { tls+: { mode: value } },
                withPrivateKey(value): { tls+: { privateKey: value } },
                withSni(value): { tls+: { sni: value } },
                subjectAltNames+: { newString(value): value },
                withSubjectAltNames(value): { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } },
                withSubjectAltNamesMixin(value): { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
              },
            },
            withPortLevelSettings(value): { trafficPolicy+: { portLevelSettings: if std.isArray(value) then value else [value] } },
            withPortLevelSettingsMixin(value): { trafficPolicy+: { portLevelSettings+: if std.isArray(value) then value else [value] } },
            withTls(value): { trafficPolicy+: { tls: value } },
            withTlsMixin(value): { trafficPolicy+: { tls+: value } },
            tls+: {
              withCaCertificates(value): { trafficPolicy+: { tls+: { caCertificates: value } } },
              withClientCertificate(value): { trafficPolicy+: { tls+: { clientCertificate: value } } },
              withCredentialName(value): { trafficPolicy+: { tls+: { credentialName: value } } },
              withMode(value): { trafficPolicy+: { tls+: { mode: value } } },
              withPrivateKey(value): { trafficPolicy+: { tls+: { privateKey: value } } },
              withSni(value): { trafficPolicy+: { tls+: { sni: value } } },
              subjectAltNames+: { newString(value): value },
              withSubjectAltNames(value): { trafficPolicy+: { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } } },
              withSubjectAltNamesMixin(value): { trafficPolicy+: { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } } },
            },
          },
        },
        withSubsets(value): { spec+: { subsets: if std.isArray(value) then value else [value] } },
        withSubsetsMixin(value): { spec+: { subsets+: if std.isArray(value) then value else [value] } },
        withTrafficPolicy(value): { spec+: { trafficPolicy: value } },
        withTrafficPolicyMixin(value): { spec+: { trafficPolicy+: value } },
        trafficPolicy+: {
          withConnectionPool(value): { spec+: { trafficPolicy+: { connectionPool: value } } },
          withConnectionPoolMixin(value): { spec+: { trafficPolicy+: { connectionPool+: value } } },
          connectionPool+: {
            withHttp(value): { spec+: { trafficPolicy+: { connectionPool+: { http: value } } } },
            withHttpMixin(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: value } } } },
            http+: {
              withH2UpgradePolicy(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { h2UpgradePolicy: value } } } } },
              withHttp1MaxPendingRequests(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { http1MaxPendingRequests: value } } } } },
              withHttp2MaxRequests(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { http2MaxRequests: value } } } } },
              withIdleTimeout(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { idleTimeout: value } } } } },
              withMaxRequestsPerConnection(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { maxRequestsPerConnection: value } } } } },
              withMaxRetries(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { maxRetries: value } } } } },
              withUseClientProtocol(value): { spec+: { trafficPolicy+: { connectionPool+: { http+: { useClientProtocol: value } } } } },
            },
            withTcp(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp: value } } } },
            withTcpMixin(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: value } } } },
            tcp+: {
              withConnectTimeout(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { connectTimeout: value } } } } },
              withMaxConnections(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { maxConnections: value } } } } },
              withTcpKeepalive(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive: value } } } } },
              withTcpKeepaliveMixin(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: value } } } } },
              tcpKeepalive+: {
                withInterval(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } } } },
                withProbes(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } } } },
                withTime(value): { spec+: { trafficPolicy+: { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } } } },
              },
            },
          },
          withLoadBalancer(value): { spec+: { trafficPolicy+: { loadBalancer: value } } },
          withLoadBalancerMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: value } } },
          loadBalancer+: {
            withConsistentHash(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash: value } } } },
            withConsistentHashMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: value } } } },
            consistentHash+: {
              withHttpCookie(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie: value } } } } },
              withHttpCookieMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: value } } } } },
              httpCookie+: {
                withName(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } } } },
                withPath(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } } } },
                withTtl(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } } } },
              },
              withHttpHeaderName(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpHeaderName: value } } } } },
              withHttpQueryParameterName(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } } } },
              withMinimumRingSize(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { minimumRingSize: value } } } } },
              withUseSourceIp(value): { spec+: { trafficPolicy+: { loadBalancer+: { consistentHash+: { useSourceIp: value } } } } },
            },
            withLocalityLbSetting(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting: value } } } },
            withLocalityLbSettingMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: value } } } },
            localityLbSetting+: {
              distribute+: {
                withFrom(value): { from: value },
                withTo(value): { to: value },
                withToMixin(value): { to+: value },
              },
              withDistribute(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } } } },
              withDistributeMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } } } },
              withEnabled(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { enabled: value } } } } },
              failover+: {
                withFrom(value): { from: value },
                withTo(value): { to: value },
              },
              withFailover(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } } } },
              withFailoverMixin(value): { spec+: { trafficPolicy+: { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } } } },
            },
            withSimple(value): { spec+: { trafficPolicy+: { loadBalancer+: { simple: value } } } },
          },
          withOutlierDetection(value): { spec+: { trafficPolicy+: { outlierDetection: value } } },
          withOutlierDetectionMixin(value): { spec+: { trafficPolicy+: { outlierDetection+: value } } },
          outlierDetection+: {
            withBaseEjectionTime(value): { spec+: { trafficPolicy+: { outlierDetection+: { baseEjectionTime: value } } } },
            withConsecutive5xxErrors(value): { spec+: { trafficPolicy+: { outlierDetection+: { consecutive5xxErrors: value } } } },
            withConsecutiveErrors(value): { spec+: { trafficPolicy+: { outlierDetection+: { consecutiveErrors: value } } } },
            withConsecutiveGatewayErrors(value): { spec+: { trafficPolicy+: { outlierDetection+: { consecutiveGatewayErrors: value } } } },
            withInterval(value): { spec+: { trafficPolicy+: { outlierDetection+: { interval: value } } } },
            withMaxEjectionPercent(value): { spec+: { trafficPolicy+: { outlierDetection+: { maxEjectionPercent: value } } } },
            withMinHealthPercent(value): { spec+: { trafficPolicy+: { outlierDetection+: { minHealthPercent: value } } } },
          },
          portLevelSettings+: {
            withConnectionPool(value): { connectionPool: value },
            withConnectionPoolMixin(value): { connectionPool+: value },
            connectionPool+: {
              withHttp(value): { connectionPool+: { http: value } },
              withHttpMixin(value): { connectionPool+: { http+: value } },
              http+: {
                withH2UpgradePolicy(value): { connectionPool+: { http+: { h2UpgradePolicy: value } } },
                withHttp1MaxPendingRequests(value): { connectionPool+: { http+: { http1MaxPendingRequests: value } } },
                withHttp2MaxRequests(value): { connectionPool+: { http+: { http2MaxRequests: value } } },
                withIdleTimeout(value): { connectionPool+: { http+: { idleTimeout: value } } },
                withMaxRequestsPerConnection(value): { connectionPool+: { http+: { maxRequestsPerConnection: value } } },
                withMaxRetries(value): { connectionPool+: { http+: { maxRetries: value } } },
                withUseClientProtocol(value): { connectionPool+: { http+: { useClientProtocol: value } } },
              },
              withTcp(value): { connectionPool+: { tcp: value } },
              withTcpMixin(value): { connectionPool+: { tcp+: value } },
              tcp+: {
                withConnectTimeout(value): { connectionPool+: { tcp+: { connectTimeout: value } } },
                withMaxConnections(value): { connectionPool+: { tcp+: { maxConnections: value } } },
                withTcpKeepalive(value): { connectionPool+: { tcp+: { tcpKeepalive: value } } },
                withTcpKeepaliveMixin(value): { connectionPool+: { tcp+: { tcpKeepalive+: value } } },
                tcpKeepalive+: {
                  withInterval(value): { connectionPool+: { tcp+: { tcpKeepalive+: { interval: value } } } },
                  withProbes(value): { connectionPool+: { tcp+: { tcpKeepalive+: { probes: value } } } },
                  withTime(value): { connectionPool+: { tcp+: { tcpKeepalive+: { time: value } } } },
                },
              },
            },
            withLoadBalancer(value): { loadBalancer: value },
            withLoadBalancerMixin(value): { loadBalancer+: value },
            loadBalancer+: {
              withConsistentHash(value): { loadBalancer+: { consistentHash: value } },
              withConsistentHashMixin(value): { loadBalancer+: { consistentHash+: value } },
              consistentHash+: {
                withHttpCookie(value): { loadBalancer+: { consistentHash+: { httpCookie: value } } },
                withHttpCookieMixin(value): { loadBalancer+: { consistentHash+: { httpCookie+: value } } },
                httpCookie+: {
                  withName(value): { loadBalancer+: { consistentHash+: { httpCookie+: { name: value } } } },
                  withPath(value): { loadBalancer+: { consistentHash+: { httpCookie+: { path: value } } } },
                  withTtl(value): { loadBalancer+: { consistentHash+: { httpCookie+: { ttl: value } } } },
                },
                withHttpHeaderName(value): { loadBalancer+: { consistentHash+: { httpHeaderName: value } } },
                withHttpQueryParameterName(value): { loadBalancer+: { consistentHash+: { httpQueryParameterName: value } } },
                withMinimumRingSize(value): { loadBalancer+: { consistentHash+: { minimumRingSize: value } } },
                withUseSourceIp(value): { loadBalancer+: { consistentHash+: { useSourceIp: value } } },
              },
              withLocalityLbSetting(value): { loadBalancer+: { localityLbSetting: value } },
              withLocalityLbSettingMixin(value): { loadBalancer+: { localityLbSetting+: value } },
              localityLbSetting+: {
                distribute+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                  withToMixin(value): { to+: value },
                },
                withDistribute(value): { loadBalancer+: { localityLbSetting+: { distribute: if std.isArray(value) then value else [value] } } },
                withDistributeMixin(value): { loadBalancer+: { localityLbSetting+: { distribute+: if std.isArray(value) then value else [value] } } },
                withEnabled(value): { loadBalancer+: { localityLbSetting+: { enabled: value } } },
                failover+: {
                  withFrom(value): { from: value },
                  withTo(value): { to: value },
                },
                withFailover(value): { loadBalancer+: { localityLbSetting+: { failover: if std.isArray(value) then value else [value] } } },
                withFailoverMixin(value): { loadBalancer+: { localityLbSetting+: { failover+: if std.isArray(value) then value else [value] } } },
              },
              withSimple(value): { loadBalancer+: { simple: value } },
            },
            withOutlierDetection(value): { outlierDetection: value },
            withOutlierDetectionMixin(value): { outlierDetection+: value },
            outlierDetection+: {
              withBaseEjectionTime(value): { outlierDetection+: { baseEjectionTime: value } },
              withConsecutive5xxErrors(value): { outlierDetection+: { consecutive5xxErrors: value } },
              withConsecutiveErrors(value): { outlierDetection+: { consecutiveErrors: value } },
              withConsecutiveGatewayErrors(value): { outlierDetection+: { consecutiveGatewayErrors: value } },
              withInterval(value): { outlierDetection+: { interval: value } },
              withMaxEjectionPercent(value): { outlierDetection+: { maxEjectionPercent: value } },
              withMinHealthPercent(value): { outlierDetection+: { minHealthPercent: value } },
            },
            withPort(value): { port: value },
            withPortMixin(value): { port+: value },
            port+: {
              withNumber(value): { port+: { number: value } },
            },
            withTls(value): { tls: value },
            withTlsMixin(value): { tls+: value },
            tls+: {
              withCaCertificates(value): { tls+: { caCertificates: value } },
              withClientCertificate(value): { tls+: { clientCertificate: value } },
              withCredentialName(value): { tls+: { credentialName: value } },
              withMode(value): { tls+: { mode: value } },
              withPrivateKey(value): { tls+: { privateKey: value } },
              withSni(value): { tls+: { sni: value } },
              subjectAltNames+: { newString(value): value },
              withSubjectAltNames(value): { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } },
              withSubjectAltNamesMixin(value): { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
            },
          },
          withPortLevelSettings(value): { spec+: { trafficPolicy+: { portLevelSettings: if std.isArray(value) then value else [value] } } },
          withPortLevelSettingsMixin(value): { spec+: { trafficPolicy+: { portLevelSettings+: if std.isArray(value) then value else [value] } } },
          withTls(value): { spec+: { trafficPolicy+: { tls: value } } },
          withTlsMixin(value): { spec+: { trafficPolicy+: { tls+: value } } },
          tls+: {
            withCaCertificates(value): { spec+: { trafficPolicy+: { tls+: { caCertificates: value } } } },
            withClientCertificate(value): { spec+: { trafficPolicy+: { tls+: { clientCertificate: value } } } },
            withCredentialName(value): { spec+: { trafficPolicy+: { tls+: { credentialName: value } } } },
            withMode(value): { spec+: { trafficPolicy+: { tls+: { mode: value } } } },
            withPrivateKey(value): { spec+: { trafficPolicy+: { tls+: { privateKey: value } } } },
            withSni(value): { spec+: { trafficPolicy+: { tls+: { sni: value } } } },
            subjectAltNames+: { newString(value): value },
            withSubjectAltNames(value): { spec+: { trafficPolicy+: { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } } } },
            withSubjectAltNamesMixin(value): { spec+: { trafficPolicy+: { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } } } },
          },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1beta1+: { destinationRule+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1beta1')
      + self.withKind('DestinationRule')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    envoyFilter+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        configPatches+: {
          withApplyTo(value): { applyTo: value },
          withMatch(value): { match: value },
          withMatchMixin(value): { match+: value },
          match+: {
            withCluster(value): { match+: { cluster: value } },
            withClusterMixin(value): { match+: { cluster+: value } },
            cluster+: {
              withName(value): { match+: { cluster+: { name: value } } },
              withPortNumber(value): { match+: { cluster+: { portNumber: value } } },
              withService(value): { match+: { cluster+: { service: value } } },
              withSubset(value): { match+: { cluster+: { subset: value } } },
            },
            withContext(value): { match+: { context: value } },
            withListener(value): { match+: { listener: value } },
            withListenerMixin(value): { match+: { listener+: value } },
            listener+: {
              withFilterChain(value): { match+: { listener+: { filterChain: value } } },
              withFilterChainMixin(value): { match+: { listener+: { filterChain+: value } } },
              filterChain+: {
                withApplicationProtocols(value): { match+: { listener+: { filterChain+: { applicationProtocols: value } } } },
                withDestinationPort(value): { match+: { listener+: { filterChain+: { destinationPort: value } } } },
                withFilter(value): { match+: { listener+: { filterChain+: { filter: value } } } },
                withFilterMixin(value): { match+: { listener+: { filterChain+: { filter+: value } } } },
                filter+: {
                  withName(value): { match+: { listener+: { filterChain+: { filter+: { name: value } } } } },
                  withSubFilter(value): { match+: { listener+: { filterChain+: { filter+: { subFilter: value } } } } },
                  withSubFilterMixin(value): { match+: { listener+: { filterChain+: { filter+: { subFilter+: value } } } } },
                  subFilter+: {
                    withName(value): { match+: { listener+: { filterChain+: { filter+: { subFilter+: { name: value } } } } } },
                  },
                },
                withName(value): { match+: { listener+: { filterChain+: { name: value } } } },
                withSni(value): { match+: { listener+: { filterChain+: { sni: value } } } },
                withTransportProtocol(value): { match+: { listener+: { filterChain+: { transportProtocol: value } } } },
              },
              withName(value): { match+: { listener+: { name: value } } },
              withPortName(value): { match+: { listener+: { portName: value } } },
              withPortNumber(value): { match+: { listener+: { portNumber: value } } },
            },
            withProxy(value): { match+: { proxy: value } },
            withProxyMixin(value): { match+: { proxy+: value } },
            proxy+: {
              withMetadata(value): { match+: { proxy+: { metadata: value } } },
              withMetadataMixin(value): { match+: { proxy+: { metadata+: value } } },
              metadata+: {
                withAnnotations(value): { match+: { proxy+: { metadata+: { annotations: value } } } },
                withAnnotationsMixin(value): { match+: { proxy+: { metadata+: { annotations+: value } } } },
                withClusterName(value): { match+: { proxy+: { metadata+: { clusterName: value } } } },
                withCreationTimestamp(value): { match+: { proxy+: { metadata+: { creationTimestamp: value } } } },
                withDeletionGracePeriodSeconds(value): { match+: { proxy+: { metadata+: { deletionGracePeriodSeconds: value } } } },
                withDeletionTimestamp(value): { match+: { proxy+: { metadata+: { deletionTimestamp: value } } } },
                finalizers+: { newString(value): value },
                withFinalizers(value): { match+: { proxy+: { metadata+: { finalizers: if std.isArray(value) then value else [value] } } } },
                withFinalizersMixin(value): { match+: { proxy+: { metadata+: { finalizers+: if std.isArray(value) then value else [value] } } } },
                withGenerateName(value): { match+: { proxy+: { metadata+: { generateName: value } } } },
                withGeneration(value): { match+: { proxy+: { metadata+: { generation: value } } } },
                withLabels(value): { match+: { proxy+: { metadata+: { labels: value } } } },
                withLabelsMixin(value): { match+: { proxy+: { metadata+: { labels+: value } } } },
                withManagedFields(value): { match+: { proxy+: { metadata+: { managedFields: if std.isArray(value) then value else [value] } } } },
                withManagedFieldsMixin(value): { match+: { proxy+: { metadata+: { managedFields+: if std.isArray(value) then value else [value] } } } },
                withName(value): { match+: { proxy+: { metadata+: { name: value } } } },
                withNamespace(value): { match+: { proxy+: { metadata+: { namespace: value } } } },
                ownerReferences+: {
                  withApiVersion(value): { apiVersion: value },
                  withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
                  withController(value): { controller: value },
                  withKind(value): { kind: value },
                  withName(value): { name: value },
                  withUid(value): { uid: value },
                },
                withOwnerReferences(value): { match+: { proxy+: { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } } } },
                withOwnerReferencesMixin(value): { match+: { proxy+: { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } } } },
                withResourceVersion(value): { match+: { proxy+: { metadata+: { resourceVersion: value } } } },
                withSelfLink(value): { match+: { proxy+: { metadata+: { selfLink: value } } } },
                withUid(value): { match+: { proxy+: { metadata+: { uid: value } } } },
              },
              withProxyVersion(value): { match+: { proxy+: { proxyVersion: value } } },
            },
            withRouteConfiguration(value): { match+: { routeConfiguration: value } },
            withRouteConfigurationMixin(value): { match+: { routeConfiguration+: value } },
            routeConfiguration+: {
              withGateway(value): { match+: { routeConfiguration+: { gateway: value } } },
              withName(value): { match+: { routeConfiguration+: { name: value } } },
              withPortName(value): { match+: { routeConfiguration+: { portName: value } } },
              withPortNumber(value): { match+: { routeConfiguration+: { portNumber: value } } },
              withVhost(value): { match+: { routeConfiguration+: { vhost: value } } },
              withVhostMixin(value): { match+: { routeConfiguration+: { vhost+: value } } },
              vhost+: {
                withName(value): { match+: { routeConfiguration+: { vhost+: { name: value } } } },
                withRoute(value): { match+: { routeConfiguration+: { vhost+: { route: value } } } },
                withRouteMixin(value): { match+: { routeConfiguration+: { vhost+: { route+: value } } } },
                route+: {
                  withAction(value): { match+: { routeConfiguration+: { vhost+: { route+: { action: value } } } } },
                  withName(value): { match+: { routeConfiguration+: { vhost+: { route+: { name: value } } } } },
                },
              },
            },
          },
          withPatch(value): { patch: value },
          withPatchMixin(value): { patch+: value },
          patch+: {
            withFilterClass(value): { patch+: { filterClass: value } },
            withOperation(value): { patch+: { operation: value } },
            withValue(value): { patch+: { value: value } },
            withValueMixin(value): { patch+: { value+: value } },
          },
        },
        withConfigPatches(value): { spec+: { configPatches: if std.isArray(value) then value else [value] } },
        withConfigPatchesMixin(value): { spec+: { configPatches+: if std.isArray(value) then value else [value] } },
        withWorkloadSelector(value): { spec+: { workloadSelector: value } },
        withWorkloadSelectorMixin(value): { spec+: { workloadSelector+: value } },
        workloadSelector+: {
          withLabels(value): { spec+: { workloadSelector+: { labels: value } } },
          withLabelsMixin(value): { spec+: { workloadSelector+: { labels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { envoyFilter+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('EnvoyFilter')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    gateway+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withSelector(value): { spec+: { selector: value } },
        withSelectorMixin(value): { spec+: { selector+: value } },
        servers+: {
          withBind(value): { bind: value },
          withDefaultEndpoint(value): { defaultEndpoint: value },
          hosts+: { newString(value): value },
          withHosts(value): { hosts: if std.isArray(value) then value else [value] },
          withHostsMixin(value): { hosts+: if std.isArray(value) then value else [value] },
          withName(value): { name: value },
          withPort(value): { port: value },
          withPortMixin(value): { port+: value },
          port+: {
            withName(value): { port+: { name: value } },
            withNumber(value): { port+: { number: value } },
            withProtocol(value): { port+: { protocol: value } },
            withTargetPort(value): { port+: { targetPort: value } },
          },
          withTls(value): { tls: value },
          withTlsMixin(value): { tls+: value },
          tls+: {
            withCaCertificates(value): { tls+: { caCertificates: value } },
            cipherSuites+: { newString(value): value },
            withCipherSuites(value): { tls+: { cipherSuites: if std.isArray(value) then value else [value] } },
            withCipherSuitesMixin(value): { tls+: { cipherSuites+: if std.isArray(value) then value else [value] } },
            withCredentialName(value): { tls+: { credentialName: value } },
            withHttpsRedirect(value): { tls+: { httpsRedirect: value } },
            withMaxProtocolVersion(value): { tls+: { maxProtocolVersion: value } },
            withMinProtocolVersion(value): { tls+: { minProtocolVersion: value } },
            withMode(value): { tls+: { mode: value } },
            withPrivateKey(value): { tls+: { privateKey: value } },
            withServerCertificate(value): { tls+: { serverCertificate: value } },
            subjectAltNames+: { newString(value): value },
            withSubjectAltNames(value): { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } },
            withSubjectAltNamesMixin(value): { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
            verifyCertificateHash+: { newString(value): value },
            withVerifyCertificateHash(value): { tls+: { verifyCertificateHash: if std.isArray(value) then value else [value] } },
            withVerifyCertificateHashMixin(value): { tls+: { verifyCertificateHash+: if std.isArray(value) then value else [value] } },
            verifyCertificateSpki+: { newString(value): value },
            withVerifyCertificateSpki(value): { tls+: { verifyCertificateSpki: if std.isArray(value) then value else [value] } },
            withVerifyCertificateSpkiMixin(value): { tls+: { verifyCertificateSpki+: if std.isArray(value) then value else [value] } },
          },
        },
        withServers(value): { spec+: { servers: if std.isArray(value) then value else [value] } },
        withServersMixin(value): { spec+: { servers+: if std.isArray(value) then value else [value] } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { gateway+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('Gateway')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1beta1+: {
    gateway+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withSelector(value): { spec+: { selector: value } },
        withSelectorMixin(value): { spec+: { selector+: value } },
        servers+: {
          withBind(value): { bind: value },
          withDefaultEndpoint(value): { defaultEndpoint: value },
          hosts+: { newString(value): value },
          withHosts(value): { hosts: if std.isArray(value) then value else [value] },
          withHostsMixin(value): { hosts+: if std.isArray(value) then value else [value] },
          withName(value): { name: value },
          withPort(value): { port: value },
          withPortMixin(value): { port+: value },
          port+: {
            withName(value): { port+: { name: value } },
            withNumber(value): { port+: { number: value } },
            withProtocol(value): { port+: { protocol: value } },
            withTargetPort(value): { port+: { targetPort: value } },
          },
          withTls(value): { tls: value },
          withTlsMixin(value): { tls+: value },
          tls+: {
            withCaCertificates(value): { tls+: { caCertificates: value } },
            cipherSuites+: { newString(value): value },
            withCipherSuites(value): { tls+: { cipherSuites: if std.isArray(value) then value else [value] } },
            withCipherSuitesMixin(value): { tls+: { cipherSuites+: if std.isArray(value) then value else [value] } },
            withCredentialName(value): { tls+: { credentialName: value } },
            withHttpsRedirect(value): { tls+: { httpsRedirect: value } },
            withMaxProtocolVersion(value): { tls+: { maxProtocolVersion: value } },
            withMinProtocolVersion(value): { tls+: { minProtocolVersion: value } },
            withMode(value): { tls+: { mode: value } },
            withPrivateKey(value): { tls+: { privateKey: value } },
            withServerCertificate(value): { tls+: { serverCertificate: value } },
            subjectAltNames+: { newString(value): value },
            withSubjectAltNames(value): { tls+: { subjectAltNames: if std.isArray(value) then value else [value] } },
            withSubjectAltNamesMixin(value): { tls+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
            verifyCertificateHash+: { newString(value): value },
            withVerifyCertificateHash(value): { tls+: { verifyCertificateHash: if std.isArray(value) then value else [value] } },
            withVerifyCertificateHashMixin(value): { tls+: { verifyCertificateHash+: if std.isArray(value) then value else [value] } },
            verifyCertificateSpki+: { newString(value): value },
            withVerifyCertificateSpki(value): { tls+: { verifyCertificateSpki: if std.isArray(value) then value else [value] } },
            withVerifyCertificateSpkiMixin(value): { tls+: { verifyCertificateSpki+: if std.isArray(value) then value else [value] } },
          },
        },
        withServers(value): { spec+: { servers: if std.isArray(value) then value else [value] } },
        withServersMixin(value): { spec+: { servers+: if std.isArray(value) then value else [value] } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1beta1+: { gateway+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1beta1')
      + self.withKind('Gateway')
      + self.metadata.withName(name),
  } } },
} {
  security+: { v1beta1+: {
    peerAuthentication+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withMtls(value): { spec+: { mtls: value } },
        withMtlsMixin(value): { spec+: { mtls+: value } },
        mtls+: {
          withMode(value): { spec+: { mtls+: { mode: value } } },
        },
        withPortLevelMtls(value): { spec+: { portLevelMtls: value } },
        withPortLevelMtlsMixin(value): { spec+: { portLevelMtls+: value } },
        withSelector(value): { spec+: { selector: value } },
        withSelectorMixin(value): { spec+: { selector+: value } },
        selector+: {
          withMatchLabels(value): { spec+: { selector+: { matchLabels: value } } },
          withMatchLabelsMixin(value): { spec+: { selector+: { matchLabels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  security+: { v1beta1+: { peerAuthentication+: {
    new(name):
      self.withApiVersion('security.istio.io/v1beta1')
      + self.withKind('PeerAuthentication')
      + self.metadata.withName(name),
  } } },
} {
  security+: { v1beta1+: {
    requestAuthentication+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        jwtRules+: {
          audiences+: { newString(value): value },
          withAudiences(value): { audiences: if std.isArray(value) then value else [value] },
          withAudiencesMixin(value): { audiences+: if std.isArray(value) then value else [value] },
          withForwardOriginalToken(value): { forwardOriginalToken: value },
          fromHeaders+: {
            withName(value): { name: value },
            withPrefix(value): { prefix: value },
          },
          withFromHeaders(value): { fromHeaders: if std.isArray(value) then value else [value] },
          withFromHeadersMixin(value): { fromHeaders+: if std.isArray(value) then value else [value] },
          fromParams+: { newString(value): value },
          withFromParams(value): { fromParams: if std.isArray(value) then value else [value] },
          withFromParamsMixin(value): { fromParams+: if std.isArray(value) then value else [value] },
          withIssuer(value): { issuer: value },
          withJwks(value): { jwks: value },
          withJwksUri(value): { jwksUri: value },
          withJwks_uri(value): { jwks_uri: value },
          withOutputPayloadToHeader(value): { outputPayloadToHeader: value },
        },
        withJwtRules(value): { spec+: { jwtRules: if std.isArray(value) then value else [value] } },
        withJwtRulesMixin(value): { spec+: { jwtRules+: if std.isArray(value) then value else [value] } },
        withSelector(value): { spec+: { selector: value } },
        withSelectorMixin(value): { spec+: { selector+: value } },
        selector+: {
          withMatchLabels(value): { spec+: { selector+: { matchLabels: value } } },
          withMatchLabelsMixin(value): { spec+: { selector+: { matchLabels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  security+: { v1beta1+: { requestAuthentication+: {
    new(name):
      self.withApiVersion('security.istio.io/v1beta1')
      + self.withKind('RequestAuthentication')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    serviceEntry+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        addresses+: { newString(value): value },
        withAddresses(value): { spec+: { addresses: if std.isArray(value) then value else [value] } },
        withAddressesMixin(value): { spec+: { addresses+: if std.isArray(value) then value else [value] } },
        endpoints+: {
          withAddress(value): { address: value },
          withLabels(value): { labels: value },
          withLabelsMixin(value): { labels+: value },
          withLocality(value): { locality: value },
          withNetwork(value): { network: value },
          withPorts(value): { ports: value },
          withPortsMixin(value): { ports+: value },
          withServiceAccount(value): { serviceAccount: value },
          withWeight(value): { weight: value },
        },
        withEndpoints(value): { spec+: { endpoints: if std.isArray(value) then value else [value] } },
        withEndpointsMixin(value): { spec+: { endpoints+: if std.isArray(value) then value else [value] } },
        exportTo+: { newString(value): value },
        withExportTo(value): { spec+: { exportTo: if std.isArray(value) then value else [value] } },
        withExportToMixin(value): { spec+: { exportTo+: if std.isArray(value) then value else [value] } },
        hosts+: { newString(value): value },
        withHosts(value): { spec+: { hosts: if std.isArray(value) then value else [value] } },
        withHostsMixin(value): { spec+: { hosts+: if std.isArray(value) then value else [value] } },
        withLocation(value): { spec+: { location: value } },
        ports+: {
          withName(value): { name: value },
          withNumber(value): { number: value },
          withProtocol(value): { protocol: value },
          withTargetPort(value): { targetPort: value },
        },
        withPorts(value): { spec+: { ports: if std.isArray(value) then value else [value] } },
        withPortsMixin(value): { spec+: { ports+: if std.isArray(value) then value else [value] } },
        withResolution(value): { spec+: { resolution: value } },
        subjectAltNames+: { newString(value): value },
        withSubjectAltNames(value): { spec+: { subjectAltNames: if std.isArray(value) then value else [value] } },
        withSubjectAltNamesMixin(value): { spec+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
        withWorkloadSelector(value): { spec+: { workloadSelector: value } },
        withWorkloadSelectorMixin(value): { spec+: { workloadSelector+: value } },
        workloadSelector+: {
          withLabels(value): { spec+: { workloadSelector+: { labels: value } } },
          withLabelsMixin(value): { spec+: { workloadSelector+: { labels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { serviceEntry+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('ServiceEntry')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1beta1+: {
    serviceEntry+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        addresses+: { newString(value): value },
        withAddresses(value): { spec+: { addresses: if std.isArray(value) then value else [value] } },
        withAddressesMixin(value): { spec+: { addresses+: if std.isArray(value) then value else [value] } },
        endpoints+: {
          withAddress(value): { address: value },
          withLabels(value): { labels: value },
          withLabelsMixin(value): { labels+: value },
          withLocality(value): { locality: value },
          withNetwork(value): { network: value },
          withPorts(value): { ports: value },
          withPortsMixin(value): { ports+: value },
          withServiceAccount(value): { serviceAccount: value },
          withWeight(value): { weight: value },
        },
        withEndpoints(value): { spec+: { endpoints: if std.isArray(value) then value else [value] } },
        withEndpointsMixin(value): { spec+: { endpoints+: if std.isArray(value) then value else [value] } },
        exportTo+: { newString(value): value },
        withExportTo(value): { spec+: { exportTo: if std.isArray(value) then value else [value] } },
        withExportToMixin(value): { spec+: { exportTo+: if std.isArray(value) then value else [value] } },
        hosts+: { newString(value): value },
        withHosts(value): { spec+: { hosts: if std.isArray(value) then value else [value] } },
        withHostsMixin(value): { spec+: { hosts+: if std.isArray(value) then value else [value] } },
        withLocation(value): { spec+: { location: value } },
        ports+: {
          withName(value): { name: value },
          withNumber(value): { number: value },
          withProtocol(value): { protocol: value },
          withTargetPort(value): { targetPort: value },
        },
        withPorts(value): { spec+: { ports: if std.isArray(value) then value else [value] } },
        withPortsMixin(value): { spec+: { ports+: if std.isArray(value) then value else [value] } },
        withResolution(value): { spec+: { resolution: value } },
        subjectAltNames+: { newString(value): value },
        withSubjectAltNames(value): { spec+: { subjectAltNames: if std.isArray(value) then value else [value] } },
        withSubjectAltNamesMixin(value): { spec+: { subjectAltNames+: if std.isArray(value) then value else [value] } },
        withWorkloadSelector(value): { spec+: { workloadSelector: value } },
        withWorkloadSelectorMixin(value): { spec+: { workloadSelector+: value } },
        workloadSelector+: {
          withLabels(value): { spec+: { workloadSelector+: { labels: value } } },
          withLabelsMixin(value): { spec+: { workloadSelector+: { labels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1beta1+: { serviceEntry+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1beta1')
      + self.withKind('ServiceEntry')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    sidecar+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        egress+: {
          withBind(value): { bind: value },
          withCaptureMode(value): { captureMode: value },
          hosts+: { newString(value): value },
          withHosts(value): { hosts: if std.isArray(value) then value else [value] },
          withHostsMixin(value): { hosts+: if std.isArray(value) then value else [value] },
          withPort(value): { port: value },
          withPortMixin(value): { port+: value },
          port+: {
            withName(value): { port+: { name: value } },
            withNumber(value): { port+: { number: value } },
            withProtocol(value): { port+: { protocol: value } },
            withTargetPort(value): { port+: { targetPort: value } },
          },
        },
        withEgress(value): { spec+: { egress: if std.isArray(value) then value else [value] } },
        withEgressMixin(value): { spec+: { egress+: if std.isArray(value) then value else [value] } },
        ingress+: {
          withBind(value): { bind: value },
          withCaptureMode(value): { captureMode: value },
          withDefaultEndpoint(value): { defaultEndpoint: value },
          withPort(value): { port: value },
          withPortMixin(value): { port+: value },
          port+: {
            withName(value): { port+: { name: value } },
            withNumber(value): { port+: { number: value } },
            withProtocol(value): { port+: { protocol: value } },
            withTargetPort(value): { port+: { targetPort: value } },
          },
        },
        withIngress(value): { spec+: { ingress: if std.isArray(value) then value else [value] } },
        withIngressMixin(value): { spec+: { ingress+: if std.isArray(value) then value else [value] } },
        withOutboundTrafficPolicy(value): { spec+: { outboundTrafficPolicy: value } },
        withOutboundTrafficPolicyMixin(value): { spec+: { outboundTrafficPolicy+: value } },
        outboundTrafficPolicy+: {
          withEgressProxy(value): { spec+: { outboundTrafficPolicy+: { egressProxy: value } } },
          withEgressProxyMixin(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: value } } },
          egressProxy+: {
            withHost(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { host: value } } } },
            withPort(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { port: value } } } },
            withPortMixin(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { port+: value } } } },
            port+: {
              withNumber(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { port+: { number: value } } } } },
            },
            withSubset(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { subset: value } } } },
          },
          withMode(value): { spec+: { outboundTrafficPolicy+: { mode: value } } },
        },
        withWorkloadSelector(value): { spec+: { workloadSelector: value } },
        withWorkloadSelectorMixin(value): { spec+: { workloadSelector+: value } },
        workloadSelector+: {
          withLabels(value): { spec+: { workloadSelector+: { labels: value } } },
          withLabelsMixin(value): { spec+: { workloadSelector+: { labels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { sidecar+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('Sidecar')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1beta1+: {
    sidecar+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        egress+: {
          withBind(value): { bind: value },
          withCaptureMode(value): { captureMode: value },
          hosts+: { newString(value): value },
          withHosts(value): { hosts: if std.isArray(value) then value else [value] },
          withHostsMixin(value): { hosts+: if std.isArray(value) then value else [value] },
          withPort(value): { port: value },
          withPortMixin(value): { port+: value },
          port+: {
            withName(value): { port+: { name: value } },
            withNumber(value): { port+: { number: value } },
            withProtocol(value): { port+: { protocol: value } },
            withTargetPort(value): { port+: { targetPort: value } },
          },
        },
        withEgress(value): { spec+: { egress: if std.isArray(value) then value else [value] } },
        withEgressMixin(value): { spec+: { egress+: if std.isArray(value) then value else [value] } },
        ingress+: {
          withBind(value): { bind: value },
          withCaptureMode(value): { captureMode: value },
          withDefaultEndpoint(value): { defaultEndpoint: value },
          withPort(value): { port: value },
          withPortMixin(value): { port+: value },
          port+: {
            withName(value): { port+: { name: value } },
            withNumber(value): { port+: { number: value } },
            withProtocol(value): { port+: { protocol: value } },
            withTargetPort(value): { port+: { targetPort: value } },
          },
        },
        withIngress(value): { spec+: { ingress: if std.isArray(value) then value else [value] } },
        withIngressMixin(value): { spec+: { ingress+: if std.isArray(value) then value else [value] } },
        withOutboundTrafficPolicy(value): { spec+: { outboundTrafficPolicy: value } },
        withOutboundTrafficPolicyMixin(value): { spec+: { outboundTrafficPolicy+: value } },
        outboundTrafficPolicy+: {
          withEgressProxy(value): { spec+: { outboundTrafficPolicy+: { egressProxy: value } } },
          withEgressProxyMixin(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: value } } },
          egressProxy+: {
            withHost(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { host: value } } } },
            withPort(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { port: value } } } },
            withPortMixin(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { port+: value } } } },
            port+: {
              withNumber(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { port+: { number: value } } } } },
            },
            withSubset(value): { spec+: { outboundTrafficPolicy+: { egressProxy+: { subset: value } } } },
          },
          withMode(value): { spec+: { outboundTrafficPolicy+: { mode: value } } },
        },
        withWorkloadSelector(value): { spec+: { workloadSelector: value } },
        withWorkloadSelectorMixin(value): { spec+: { workloadSelector+: value } },
        workloadSelector+: {
          withLabels(value): { spec+: { workloadSelector+: { labels: value } } },
          withLabelsMixin(value): { spec+: { workloadSelector+: { labels+: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1beta1+: { sidecar+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1beta1')
      + self.withKind('Sidecar')
      + self.metadata.withName(name),
  } } },
} {
  telemetry+: { v1alpha1+: {
    telemetry+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withSelector(value): { spec+: { selector: value } },
        withSelectorMixin(value): { spec+: { selector+: value } },
        selector+: {
          withMatchLabels(value): { spec+: { selector+: { matchLabels: value } } },
          withMatchLabelsMixin(value): { spec+: { selector+: { matchLabels+: value } } },
        },
        tracing+: {
          withCustomTags(value): { customTags: value },
          withCustomTagsMixin(value): { customTags+: value },
          withDisableSpanReporting(value): { disableSpanReporting: value },
          providers+: {
            withName(value): { name: value },
          },
          withProviders(value): { providers: if std.isArray(value) then value else [value] },
          withProvidersMixin(value): { providers+: if std.isArray(value) then value else [value] },
          withRandomSamplingPercentage(value): { randomSamplingPercentage: value },
        },
        withTracing(value): { spec+: { tracing: if std.isArray(value) then value else [value] } },
        withTracingMixin(value): { spec+: { tracing+: if std.isArray(value) then value else [value] } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  telemetry+: { v1alpha1+: { telemetry+: {
    new(name):
      self.withApiVersion('telemetry.istio.io/v1alpha1')
      + self.withKind('Telemetry')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    virtualService+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        exportTo+: { newString(value): value },
        withExportTo(value): { spec+: { exportTo: if std.isArray(value) then value else [value] } },
        withExportToMixin(value): { spec+: { exportTo+: if std.isArray(value) then value else [value] } },
        gateways+: { newString(value): value },
        withGateways(value): { spec+: { gateways: if std.isArray(value) then value else [value] } },
        withGatewaysMixin(value): { spec+: { gateways+: if std.isArray(value) then value else [value] } },
        hosts+: { newString(value): value },
        withHosts(value): { spec+: { hosts: if std.isArray(value) then value else [value] } },
        withHostsMixin(value): { spec+: { hosts+: if std.isArray(value) then value else [value] } },
        http+: {
          withCorsPolicy(value): { corsPolicy: value },
          withCorsPolicyMixin(value): { corsPolicy+: value },
          corsPolicy+: {
            withAllowCredentials(value): { corsPolicy+: { allowCredentials: value } },
            allowHeaders+: { newString(value): value },
            withAllowHeaders(value): { corsPolicy+: { allowHeaders: if std.isArray(value) then value else [value] } },
            withAllowHeadersMixin(value): { corsPolicy+: { allowHeaders+: if std.isArray(value) then value else [value] } },
            allowMethods+: { newString(value): value },
            withAllowMethods(value): { corsPolicy+: { allowMethods: if std.isArray(value) then value else [value] } },
            withAllowMethodsMixin(value): { corsPolicy+: { allowMethods+: if std.isArray(value) then value else [value] } },
            allowOrigin+: { newString(value): value },
            withAllowOrigin(value): { corsPolicy+: { allowOrigin: if std.isArray(value) then value else [value] } },
            withAllowOriginMixin(value): { corsPolicy+: { allowOrigin+: if std.isArray(value) then value else [value] } },
            allowOrigins+: {
              withExact(value): { exact: value },
              withPrefix(value): { prefix: value },
              withRegex(value): { regex: value },
            },
            withAllowOrigins(value): { corsPolicy+: { allowOrigins: if std.isArray(value) then value else [value] } },
            withAllowOriginsMixin(value): { corsPolicy+: { allowOrigins+: if std.isArray(value) then value else [value] } },
            exposeHeaders+: { newString(value): value },
            withExposeHeaders(value): { corsPolicy+: { exposeHeaders: if std.isArray(value) then value else [value] } },
            withExposeHeadersMixin(value): { corsPolicy+: { exposeHeaders+: if std.isArray(value) then value else [value] } },
            withMaxAge(value): { corsPolicy+: { maxAge: value } },
          },
          withDelegate(value): { delegate: value },
          withDelegateMixin(value): { delegate+: value },
          delegate+: {
            withName(value): { delegate+: { name: value } },
            withNamespace(value): { delegate+: { namespace: value } },
          },
          withFault(value): { fault: value },
          withFaultMixin(value): { fault+: value },
          fault+: {
            withAbort(value): { fault+: { abort: value } },
            withAbortMixin(value): { fault+: { abort+: value } },
            abort+: {
              withGrpcStatus(value): { fault+: { abort+: { grpcStatus: value } } },
              withHttp2Error(value): { fault+: { abort+: { http2Error: value } } },
              withHttpStatus(value): { fault+: { abort+: { httpStatus: value } } },
              withPercentage(value): { fault+: { abort+: { percentage: value } } },
              withPercentageMixin(value): { fault+: { abort+: { percentage+: value } } },
              percentage+: {
                withValue(value): { fault+: { abort+: { percentage+: { value: value } } } },
              },
            },
            withDelay(value): { fault+: { delay: value } },
            withDelayMixin(value): { fault+: { delay+: value } },
            delay+: {
              withExponentialDelay(value): { fault+: { delay+: { exponentialDelay: value } } },
              withFixedDelay(value): { fault+: { delay+: { fixedDelay: value } } },
              withPercent(value): { fault+: { delay+: { percent: value } } },
              withPercentage(value): { fault+: { delay+: { percentage: value } } },
              withPercentageMixin(value): { fault+: { delay+: { percentage+: value } } },
              percentage+: {
                withValue(value): { fault+: { delay+: { percentage+: { value: value } } } },
              },
            },
          },
          withHeaders(value): { headers: value },
          withHeadersMixin(value): { headers+: value },
          headers+: {
            withRequest(value): { headers+: { request: value } },
            withRequestMixin(value): { headers+: { request+: value } },
            request+: {
              withAdd(value): { headers+: { request+: { add: value } } },
              withAddMixin(value): { headers+: { request+: { add+: value } } },
              remove+: { newString(value): value },
              withRemove(value): { headers+: { request+: { remove: if std.isArray(value) then value else [value] } } },
              withRemoveMixin(value): { headers+: { request+: { remove+: if std.isArray(value) then value else [value] } } },
              withSet(value): { headers+: { request+: { set: value } } },
              withSetMixin(value): { headers+: { request+: { set+: value } } },
            },
            withResponse(value): { headers+: { response: value } },
            withResponseMixin(value): { headers+: { response+: value } },
            response+: {
              withAdd(value): { headers+: { response+: { add: value } } },
              withAddMixin(value): { headers+: { response+: { add+: value } } },
              remove+: { newString(value): value },
              withRemove(value): { headers+: { response+: { remove: if std.isArray(value) then value else [value] } } },
              withRemoveMixin(value): { headers+: { response+: { remove+: if std.isArray(value) then value else [value] } } },
              withSet(value): { headers+: { response+: { set: value } } },
              withSetMixin(value): { headers+: { response+: { set+: value } } },
            },
          },
          match+: {
            withAuthority(value): { authority: value },
            withAuthorityMixin(value): { authority+: value },
            authority+: {
              withExact(value): { authority+: { exact: value } },
              withPrefix(value): { authority+: { prefix: value } },
              withRegex(value): { authority+: { regex: value } },
            },
            gateways+: { newString(value): value },
            withGateways(value): { gateways: if std.isArray(value) then value else [value] },
            withGatewaysMixin(value): { gateways+: if std.isArray(value) then value else [value] },
            withHeaders(value): { headers: value },
            withHeadersMixin(value): { headers+: value },
            withIgnoreUriCase(value): { ignoreUriCase: value },
            withMethod(value): { method: value },
            withMethodMixin(value): { method+: value },
            method+: {
              withExact(value): { method+: { exact: value } },
              withPrefix(value): { method+: { prefix: value } },
              withRegex(value): { method+: { regex: value } },
            },
            withName(value): { name: value },
            withPort(value): { port: value },
            withQueryParams(value): { queryParams: value },
            withQueryParamsMixin(value): { queryParams+: value },
            withScheme(value): { scheme: value },
            withSchemeMixin(value): { scheme+: value },
            scheme+: {
              withExact(value): { scheme+: { exact: value } },
              withPrefix(value): { scheme+: { prefix: value } },
              withRegex(value): { scheme+: { regex: value } },
            },
            withSourceLabels(value): { sourceLabels: value },
            withSourceLabelsMixin(value): { sourceLabels+: value },
            withSourceNamespace(value): { sourceNamespace: value },
            withUri(value): { uri: value },
            withUriMixin(value): { uri+: value },
            uri+: {
              withExact(value): { uri+: { exact: value } },
              withPrefix(value): { uri+: { prefix: value } },
              withRegex(value): { uri+: { regex: value } },
            },
            withWithoutHeaders(value): { withoutHeaders: value },
            withWithoutHeadersMixin(value): { withoutHeaders+: value },
          },
          withMatch(value): { match: if std.isArray(value) then value else [value] },
          withMatchMixin(value): { match+: if std.isArray(value) then value else [value] },
          withMirror(value): { mirror: value },
          withMirrorMixin(value): { mirror+: value },
          mirror+: {
            withHost(value): { mirror+: { host: value } },
            withPort(value): { mirror+: { port: value } },
            withPortMixin(value): { mirror+: { port+: value } },
            port+: {
              withNumber(value): { mirror+: { port+: { number: value } } },
            },
            withSubset(value): { mirror+: { subset: value } },
          },
          withMirrorPercent(value): { mirrorPercent: value },
          withMirrorPercentage(value): { mirrorPercentage: value },
          withMirrorPercentageMixin(value): { mirrorPercentage+: value },
          mirrorPercentage+: {
            withValue(value): { mirrorPercentage+: { value: value } },
          },
          withMirror_percent(value): { mirror_percent: value },
          withName(value): { name: value },
          withRedirect(value): { redirect: value },
          withRedirectMixin(value): { redirect+: value },
          redirect+: {
            withAuthority(value): { redirect+: { authority: value } },
            withRedirectCode(value): { redirect+: { redirectCode: value } },
            withUri(value): { redirect+: { uri: value } },
          },
          withRetries(value): { retries: value },
          withRetriesMixin(value): { retries+: value },
          retries+: {
            withAttempts(value): { retries+: { attempts: value } },
            withPerTryTimeout(value): { retries+: { perTryTimeout: value } },
            withRetryOn(value): { retries+: { retryOn: value } },
            withRetryRemoteLocalities(value): { retries+: { retryRemoteLocalities: value } },
          },
          withRewrite(value): { rewrite: value },
          withRewriteMixin(value): { rewrite+: value },
          rewrite+: {
            withAuthority(value): { rewrite+: { authority: value } },
            withUri(value): { rewrite+: { uri: value } },
          },
          route+: {
            withDestination(value): { destination: value },
            withDestinationMixin(value): { destination+: value },
            destination+: {
              withHost(value): { destination+: { host: value } },
              withPort(value): { destination+: { port: value } },
              withPortMixin(value): { destination+: { port+: value } },
              port+: {
                withNumber(value): { destination+: { port+: { number: value } } },
              },
              withSubset(value): { destination+: { subset: value } },
            },
            withHeaders(value): { headers: value },
            withHeadersMixin(value): { headers+: value },
            headers+: {
              withRequest(value): { headers+: { request: value } },
              withRequestMixin(value): { headers+: { request+: value } },
              request+: {
                withAdd(value): { headers+: { request+: { add: value } } },
                withAddMixin(value): { headers+: { request+: { add+: value } } },
                remove+: { newString(value): value },
                withRemove(value): { headers+: { request+: { remove: if std.isArray(value) then value else [value] } } },
                withRemoveMixin(value): { headers+: { request+: { remove+: if std.isArray(value) then value else [value] } } },
                withSet(value): { headers+: { request+: { set: value } } },
                withSetMixin(value): { headers+: { request+: { set+: value } } },
              },
              withResponse(value): { headers+: { response: value } },
              withResponseMixin(value): { headers+: { response+: value } },
              response+: {
                withAdd(value): { headers+: { response+: { add: value } } },
                withAddMixin(value): { headers+: { response+: { add+: value } } },
                remove+: { newString(value): value },
                withRemove(value): { headers+: { response+: { remove: if std.isArray(value) then value else [value] } } },
                withRemoveMixin(value): { headers+: { response+: { remove+: if std.isArray(value) then value else [value] } } },
                withSet(value): { headers+: { response+: { set: value } } },
                withSetMixin(value): { headers+: { response+: { set+: value } } },
              },
            },
            withWeight(value): { weight: value },
          },
          withRoute(value): { route: if std.isArray(value) then value else [value] },
          withRouteMixin(value): { route+: if std.isArray(value) then value else [value] },
          withTimeout(value): { timeout: value },
        },
        withHttp(value): { spec+: { http: if std.isArray(value) then value else [value] } },
        withHttpMixin(value): { spec+: { http+: if std.isArray(value) then value else [value] } },
        tcp+: {
          match+: {
            destinationSubnets+: { newString(value): value },
            withDestinationSubnets(value): { destinationSubnets: if std.isArray(value) then value else [value] },
            withDestinationSubnetsMixin(value): { destinationSubnets+: if std.isArray(value) then value else [value] },
            gateways+: { newString(value): value },
            withGateways(value): { gateways: if std.isArray(value) then value else [value] },
            withGatewaysMixin(value): { gateways+: if std.isArray(value) then value else [value] },
            withPort(value): { port: value },
            withSourceLabels(value): { sourceLabels: value },
            withSourceLabelsMixin(value): { sourceLabels+: value },
            withSourceNamespace(value): { sourceNamespace: value },
            withSourceSubnet(value): { sourceSubnet: value },
          },
          withMatch(value): { match: if std.isArray(value) then value else [value] },
          withMatchMixin(value): { match+: if std.isArray(value) then value else [value] },
          route+: {
            withDestination(value): { destination: value },
            withDestinationMixin(value): { destination+: value },
            destination+: {
              withHost(value): { destination+: { host: value } },
              withPort(value): { destination+: { port: value } },
              withPortMixin(value): { destination+: { port+: value } },
              port+: {
                withNumber(value): { destination+: { port+: { number: value } } },
              },
              withSubset(value): { destination+: { subset: value } },
            },
            withWeight(value): { weight: value },
          },
          withRoute(value): { route: if std.isArray(value) then value else [value] },
          withRouteMixin(value): { route+: if std.isArray(value) then value else [value] },
        },
        withTcp(value): { spec+: { tcp: if std.isArray(value) then value else [value] } },
        withTcpMixin(value): { spec+: { tcp+: if std.isArray(value) then value else [value] } },
        tls+: {
          match+: {
            destinationSubnets+: { newString(value): value },
            withDestinationSubnets(value): { destinationSubnets: if std.isArray(value) then value else [value] },
            withDestinationSubnetsMixin(value): { destinationSubnets+: if std.isArray(value) then value else [value] },
            gateways+: { newString(value): value },
            withGateways(value): { gateways: if std.isArray(value) then value else [value] },
            withGatewaysMixin(value): { gateways+: if std.isArray(value) then value else [value] },
            withPort(value): { port: value },
            sniHosts+: { newString(value): value },
            withSniHosts(value): { sniHosts: if std.isArray(value) then value else [value] },
            withSniHostsMixin(value): { sniHosts+: if std.isArray(value) then value else [value] },
            withSourceLabels(value): { sourceLabels: value },
            withSourceLabelsMixin(value): { sourceLabels+: value },
            withSourceNamespace(value): { sourceNamespace: value },
          },
          withMatch(value): { match: if std.isArray(value) then value else [value] },
          withMatchMixin(value): { match+: if std.isArray(value) then value else [value] },
          route+: {
            withDestination(value): { destination: value },
            withDestinationMixin(value): { destination+: value },
            destination+: {
              withHost(value): { destination+: { host: value } },
              withPort(value): { destination+: { port: value } },
              withPortMixin(value): { destination+: { port+: value } },
              port+: {
                withNumber(value): { destination+: { port+: { number: value } } },
              },
              withSubset(value): { destination+: { subset: value } },
            },
            withWeight(value): { weight: value },
          },
          withRoute(value): { route: if std.isArray(value) then value else [value] },
          withRouteMixin(value): { route+: if std.isArray(value) then value else [value] },
        },
        withTls(value): { spec+: { tls: if std.isArray(value) then value else [value] } },
        withTlsMixin(value): { spec+: { tls+: if std.isArray(value) then value else [value] } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { virtualService+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('VirtualService')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1beta1+: {
    virtualService+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        exportTo+: { newString(value): value },
        withExportTo(value): { spec+: { exportTo: if std.isArray(value) then value else [value] } },
        withExportToMixin(value): { spec+: { exportTo+: if std.isArray(value) then value else [value] } },
        gateways+: { newString(value): value },
        withGateways(value): { spec+: { gateways: if std.isArray(value) then value else [value] } },
        withGatewaysMixin(value): { spec+: { gateways+: if std.isArray(value) then value else [value] } },
        hosts+: { newString(value): value },
        withHosts(value): { spec+: { hosts: if std.isArray(value) then value else [value] } },
        withHostsMixin(value): { spec+: { hosts+: if std.isArray(value) then value else [value] } },
        http+: {
          withCorsPolicy(value): { corsPolicy: value },
          withCorsPolicyMixin(value): { corsPolicy+: value },
          corsPolicy+: {
            withAllowCredentials(value): { corsPolicy+: { allowCredentials: value } },
            allowHeaders+: { newString(value): value },
            withAllowHeaders(value): { corsPolicy+: { allowHeaders: if std.isArray(value) then value else [value] } },
            withAllowHeadersMixin(value): { corsPolicy+: { allowHeaders+: if std.isArray(value) then value else [value] } },
            allowMethods+: { newString(value): value },
            withAllowMethods(value): { corsPolicy+: { allowMethods: if std.isArray(value) then value else [value] } },
            withAllowMethodsMixin(value): { corsPolicy+: { allowMethods+: if std.isArray(value) then value else [value] } },
            allowOrigin+: { newString(value): value },
            withAllowOrigin(value): { corsPolicy+: { allowOrigin: if std.isArray(value) then value else [value] } },
            withAllowOriginMixin(value): { corsPolicy+: { allowOrigin+: if std.isArray(value) then value else [value] } },
            allowOrigins+: {
              withExact(value): { exact: value },
              withPrefix(value): { prefix: value },
              withRegex(value): { regex: value },
            },
            withAllowOrigins(value): { corsPolicy+: { allowOrigins: if std.isArray(value) then value else [value] } },
            withAllowOriginsMixin(value): { corsPolicy+: { allowOrigins+: if std.isArray(value) then value else [value] } },
            exposeHeaders+: { newString(value): value },
            withExposeHeaders(value): { corsPolicy+: { exposeHeaders: if std.isArray(value) then value else [value] } },
            withExposeHeadersMixin(value): { corsPolicy+: { exposeHeaders+: if std.isArray(value) then value else [value] } },
            withMaxAge(value): { corsPolicy+: { maxAge: value } },
          },
          withDelegate(value): { delegate: value },
          withDelegateMixin(value): { delegate+: value },
          delegate+: {
            withName(value): { delegate+: { name: value } },
            withNamespace(value): { delegate+: { namespace: value } },
          },
          withFault(value): { fault: value },
          withFaultMixin(value): { fault+: value },
          fault+: {
            withAbort(value): { fault+: { abort: value } },
            withAbortMixin(value): { fault+: { abort+: value } },
            abort+: {
              withGrpcStatus(value): { fault+: { abort+: { grpcStatus: value } } },
              withHttp2Error(value): { fault+: { abort+: { http2Error: value } } },
              withHttpStatus(value): { fault+: { abort+: { httpStatus: value } } },
              withPercentage(value): { fault+: { abort+: { percentage: value } } },
              withPercentageMixin(value): { fault+: { abort+: { percentage+: value } } },
              percentage+: {
                withValue(value): { fault+: { abort+: { percentage+: { value: value } } } },
              },
            },
            withDelay(value): { fault+: { delay: value } },
            withDelayMixin(value): { fault+: { delay+: value } },
            delay+: {
              withExponentialDelay(value): { fault+: { delay+: { exponentialDelay: value } } },
              withFixedDelay(value): { fault+: { delay+: { fixedDelay: value } } },
              withPercent(value): { fault+: { delay+: { percent: value } } },
              withPercentage(value): { fault+: { delay+: { percentage: value } } },
              withPercentageMixin(value): { fault+: { delay+: { percentage+: value } } },
              percentage+: {
                withValue(value): { fault+: { delay+: { percentage+: { value: value } } } },
              },
            },
          },
          withHeaders(value): { headers: value },
          withHeadersMixin(value): { headers+: value },
          headers+: {
            withRequest(value): { headers+: { request: value } },
            withRequestMixin(value): { headers+: { request+: value } },
            request+: {
              withAdd(value): { headers+: { request+: { add: value } } },
              withAddMixin(value): { headers+: { request+: { add+: value } } },
              remove+: { newString(value): value },
              withRemove(value): { headers+: { request+: { remove: if std.isArray(value) then value else [value] } } },
              withRemoveMixin(value): { headers+: { request+: { remove+: if std.isArray(value) then value else [value] } } },
              withSet(value): { headers+: { request+: { set: value } } },
              withSetMixin(value): { headers+: { request+: { set+: value } } },
            },
            withResponse(value): { headers+: { response: value } },
            withResponseMixin(value): { headers+: { response+: value } },
            response+: {
              withAdd(value): { headers+: { response+: { add: value } } },
              withAddMixin(value): { headers+: { response+: { add+: value } } },
              remove+: { newString(value): value },
              withRemove(value): { headers+: { response+: { remove: if std.isArray(value) then value else [value] } } },
              withRemoveMixin(value): { headers+: { response+: { remove+: if std.isArray(value) then value else [value] } } },
              withSet(value): { headers+: { response+: { set: value } } },
              withSetMixin(value): { headers+: { response+: { set+: value } } },
            },
          },
          match+: {
            withAuthority(value): { authority: value },
            withAuthorityMixin(value): { authority+: value },
            authority+: {
              withExact(value): { authority+: { exact: value } },
              withPrefix(value): { authority+: { prefix: value } },
              withRegex(value): { authority+: { regex: value } },
            },
            gateways+: { newString(value): value },
            withGateways(value): { gateways: if std.isArray(value) then value else [value] },
            withGatewaysMixin(value): { gateways+: if std.isArray(value) then value else [value] },
            withHeaders(value): { headers: value },
            withHeadersMixin(value): { headers+: value },
            withIgnoreUriCase(value): { ignoreUriCase: value },
            withMethod(value): { method: value },
            withMethodMixin(value): { method+: value },
            method+: {
              withExact(value): { method+: { exact: value } },
              withPrefix(value): { method+: { prefix: value } },
              withRegex(value): { method+: { regex: value } },
            },
            withName(value): { name: value },
            withPort(value): { port: value },
            withQueryParams(value): { queryParams: value },
            withQueryParamsMixin(value): { queryParams+: value },
            withScheme(value): { scheme: value },
            withSchemeMixin(value): { scheme+: value },
            scheme+: {
              withExact(value): { scheme+: { exact: value } },
              withPrefix(value): { scheme+: { prefix: value } },
              withRegex(value): { scheme+: { regex: value } },
            },
            withSourceLabels(value): { sourceLabels: value },
            withSourceLabelsMixin(value): { sourceLabels+: value },
            withSourceNamespace(value): { sourceNamespace: value },
            withUri(value): { uri: value },
            withUriMixin(value): { uri+: value },
            uri+: {
              withExact(value): { uri+: { exact: value } },
              withPrefix(value): { uri+: { prefix: value } },
              withRegex(value): { uri+: { regex: value } },
            },
            withWithoutHeaders(value): { withoutHeaders: value },
            withWithoutHeadersMixin(value): { withoutHeaders+: value },
          },
          withMatch(value): { match: if std.isArray(value) then value else [value] },
          withMatchMixin(value): { match+: if std.isArray(value) then value else [value] },
          withMirror(value): { mirror: value },
          withMirrorMixin(value): { mirror+: value },
          mirror+: {
            withHost(value): { mirror+: { host: value } },
            withPort(value): { mirror+: { port: value } },
            withPortMixin(value): { mirror+: { port+: value } },
            port+: {
              withNumber(value): { mirror+: { port+: { number: value } } },
            },
            withSubset(value): { mirror+: { subset: value } },
          },
          withMirrorPercent(value): { mirrorPercent: value },
          withMirrorPercentage(value): { mirrorPercentage: value },
          withMirrorPercentageMixin(value): { mirrorPercentage+: value },
          mirrorPercentage+: {
            withValue(value): { mirrorPercentage+: { value: value } },
          },
          withMirror_percent(value): { mirror_percent: value },
          withName(value): { name: value },
          withRedirect(value): { redirect: value },
          withRedirectMixin(value): { redirect+: value },
          redirect+: {
            withAuthority(value): { redirect+: { authority: value } },
            withRedirectCode(value): { redirect+: { redirectCode: value } },
            withUri(value): { redirect+: { uri: value } },
          },
          withRetries(value): { retries: value },
          withRetriesMixin(value): { retries+: value },
          retries+: {
            withAttempts(value): { retries+: { attempts: value } },
            withPerTryTimeout(value): { retries+: { perTryTimeout: value } },
            withRetryOn(value): { retries+: { retryOn: value } },
            withRetryRemoteLocalities(value): { retries+: { retryRemoteLocalities: value } },
          },
          withRewrite(value): { rewrite: value },
          withRewriteMixin(value): { rewrite+: value },
          rewrite+: {
            withAuthority(value): { rewrite+: { authority: value } },
            withUri(value): { rewrite+: { uri: value } },
          },
          route+: {
            withDestination(value): { destination: value },
            withDestinationMixin(value): { destination+: value },
            destination+: {
              withHost(value): { destination+: { host: value } },
              withPort(value): { destination+: { port: value } },
              withPortMixin(value): { destination+: { port+: value } },
              port+: {
                withNumber(value): { destination+: { port+: { number: value } } },
              },
              withSubset(value): { destination+: { subset: value } },
            },
            withHeaders(value): { headers: value },
            withHeadersMixin(value): { headers+: value },
            headers+: {
              withRequest(value): { headers+: { request: value } },
              withRequestMixin(value): { headers+: { request+: value } },
              request+: {
                withAdd(value): { headers+: { request+: { add: value } } },
                withAddMixin(value): { headers+: { request+: { add+: value } } },
                remove+: { newString(value): value },
                withRemove(value): { headers+: { request+: { remove: if std.isArray(value) then value else [value] } } },
                withRemoveMixin(value): { headers+: { request+: { remove+: if std.isArray(value) then value else [value] } } },
                withSet(value): { headers+: { request+: { set: value } } },
                withSetMixin(value): { headers+: { request+: { set+: value } } },
              },
              withResponse(value): { headers+: { response: value } },
              withResponseMixin(value): { headers+: { response+: value } },
              response+: {
                withAdd(value): { headers+: { response+: { add: value } } },
                withAddMixin(value): { headers+: { response+: { add+: value } } },
                remove+: { newString(value): value },
                withRemove(value): { headers+: { response+: { remove: if std.isArray(value) then value else [value] } } },
                withRemoveMixin(value): { headers+: { response+: { remove+: if std.isArray(value) then value else [value] } } },
                withSet(value): { headers+: { response+: { set: value } } },
                withSetMixin(value): { headers+: { response+: { set+: value } } },
              },
            },
            withWeight(value): { weight: value },
          },
          withRoute(value): { route: if std.isArray(value) then value else [value] },
          withRouteMixin(value): { route+: if std.isArray(value) then value else [value] },
          withTimeout(value): { timeout: value },
        },
        withHttp(value): { spec+: { http: if std.isArray(value) then value else [value] } },
        withHttpMixin(value): { spec+: { http+: if std.isArray(value) then value else [value] } },
        tcp+: {
          match+: {
            destinationSubnets+: { newString(value): value },
            withDestinationSubnets(value): { destinationSubnets: if std.isArray(value) then value else [value] },
            withDestinationSubnetsMixin(value): { destinationSubnets+: if std.isArray(value) then value else [value] },
            gateways+: { newString(value): value },
            withGateways(value): { gateways: if std.isArray(value) then value else [value] },
            withGatewaysMixin(value): { gateways+: if std.isArray(value) then value else [value] },
            withPort(value): { port: value },
            withSourceLabels(value): { sourceLabels: value },
            withSourceLabelsMixin(value): { sourceLabels+: value },
            withSourceNamespace(value): { sourceNamespace: value },
            withSourceSubnet(value): { sourceSubnet: value },
          },
          withMatch(value): { match: if std.isArray(value) then value else [value] },
          withMatchMixin(value): { match+: if std.isArray(value) then value else [value] },
          route+: {
            withDestination(value): { destination: value },
            withDestinationMixin(value): { destination+: value },
            destination+: {
              withHost(value): { destination+: { host: value } },
              withPort(value): { destination+: { port: value } },
              withPortMixin(value): { destination+: { port+: value } },
              port+: {
                withNumber(value): { destination+: { port+: { number: value } } },
              },
              withSubset(value): { destination+: { subset: value } },
            },
            withWeight(value): { weight: value },
          },
          withRoute(value): { route: if std.isArray(value) then value else [value] },
          withRouteMixin(value): { route+: if std.isArray(value) then value else [value] },
        },
        withTcp(value): { spec+: { tcp: if std.isArray(value) then value else [value] } },
        withTcpMixin(value): { spec+: { tcp+: if std.isArray(value) then value else [value] } },
        tls+: {
          match+: {
            destinationSubnets+: { newString(value): value },
            withDestinationSubnets(value): { destinationSubnets: if std.isArray(value) then value else [value] },
            withDestinationSubnetsMixin(value): { destinationSubnets+: if std.isArray(value) then value else [value] },
            gateways+: { newString(value): value },
            withGateways(value): { gateways: if std.isArray(value) then value else [value] },
            withGatewaysMixin(value): { gateways+: if std.isArray(value) then value else [value] },
            withPort(value): { port: value },
            sniHosts+: { newString(value): value },
            withSniHosts(value): { sniHosts: if std.isArray(value) then value else [value] },
            withSniHostsMixin(value): { sniHosts+: if std.isArray(value) then value else [value] },
            withSourceLabels(value): { sourceLabels: value },
            withSourceLabelsMixin(value): { sourceLabels+: value },
            withSourceNamespace(value): { sourceNamespace: value },
          },
          withMatch(value): { match: if std.isArray(value) then value else [value] },
          withMatchMixin(value): { match+: if std.isArray(value) then value else [value] },
          route+: {
            withDestination(value): { destination: value },
            withDestinationMixin(value): { destination+: value },
            destination+: {
              withHost(value): { destination+: { host: value } },
              withPort(value): { destination+: { port: value } },
              withPortMixin(value): { destination+: { port+: value } },
              port+: {
                withNumber(value): { destination+: { port+: { number: value } } },
              },
              withSubset(value): { destination+: { subset: value } },
            },
            withWeight(value): { weight: value },
          },
          withRoute(value): { route: if std.isArray(value) then value else [value] },
          withRouteMixin(value): { route+: if std.isArray(value) then value else [value] },
        },
        withTls(value): { spec+: { tls: if std.isArray(value) then value else [value] } },
        withTlsMixin(value): { spec+: { tls+: if std.isArray(value) then value else [value] } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1beta1+: { virtualService+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1beta1')
      + self.withKind('VirtualService')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    workloadEntry+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withAddress(value): { spec+: { address: value } },
        withLabels(value): { spec+: { labels: value } },
        withLabelsMixin(value): { spec+: { labels+: value } },
        withLocality(value): { spec+: { locality: value } },
        withNetwork(value): { spec+: { network: value } },
        withPorts(value): { spec+: { ports: value } },
        withPortsMixin(value): { spec+: { ports+: value } },
        withServiceAccount(value): { spec+: { serviceAccount: value } },
        withWeight(value): { spec+: { weight: value } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { workloadEntry+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('WorkloadEntry')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1beta1+: {
    workloadEntry+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withAddress(value): { spec+: { address: value } },
        withLabels(value): { spec+: { labels: value } },
        withLabelsMixin(value): { spec+: { labels+: value } },
        withLocality(value): { spec+: { locality: value } },
        withNetwork(value): { spec+: { network: value } },
        withPorts(value): { spec+: { ports: value } },
        withPortsMixin(value): { spec+: { ports+: value } },
        withServiceAccount(value): { spec+: { serviceAccount: value } },
        withWeight(value): { spec+: { weight: value } },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1beta1+: { workloadEntry+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1beta1')
      + self.withKind('WorkloadEntry')
      + self.metadata.withName(name),
  } } },
} {
  networking+: { v1alpha3+: {
    workloadGroup+: {
      withKind(value): { kind: value },
      withMetadata(value): { metadata: value },
      withMetadataMixin(value): { metadata+: value },
      metadata+: {
        withAnnotations(value): { metadata+: { annotations: value } },
        withAnnotationsMixin(value): { metadata+: { annotations+: value } },
        withClusterName(value): { metadata+: { clusterName: value } },
        withCreationTimestamp(value): { metadata+: { creationTimestamp: value } },
        withDeletionGracePeriodSeconds(value): { metadata+: { deletionGracePeriodSeconds: value } },
        withDeletionTimestamp(value): { metadata+: { deletionTimestamp: value } },
        finalizers+: { newString(value): value },
        withFinalizers(value): { metadata+: { finalizers: if std.isArray(value) then value else [value] } },
        withFinalizersMixin(value): { metadata+: { finalizers+: if std.isArray(value) then value else [value] } },
        withGenerateName(value): { metadata+: { generateName: value } },
        withGeneration(value): { metadata+: { generation: value } },
        withLabels(value): { metadata+: { labels: value } },
        withLabelsMixin(value): { metadata+: { labels+: value } },
        withManagedFields(value): { metadata+: { managedFields: if std.isArray(value) then value else [value] } },
        withManagedFieldsMixin(value): { metadata+: { managedFields+: if std.isArray(value) then value else [value] } },
        withName(value): { metadata+: { name: value } },
        withNamespace(value): { metadata+: { namespace: value } },
        ownerReferences+: {
          withApiVersion(value): { apiVersion: value },
          withBlockOwnerDeletion(value): { blockOwnerDeletion: value },
          withController(value): { controller: value },
          withKind(value): { kind: value },
          withName(value): { name: value },
          withUid(value): { uid: value },
        },
        withOwnerReferences(value): { metadata+: { ownerReferences: if std.isArray(value) then value else [value] } },
        withOwnerReferencesMixin(value): { metadata+: { ownerReferences+: if std.isArray(value) then value else [value] } },
        withResourceVersion(value): { metadata+: { resourceVersion: value } },
        withSelfLink(value): { metadata+: { selfLink: value } },
        withUid(value): { metadata+: { uid: value } },
      },
      withSpec(value): { spec: value },
      withSpecMixin(value): { spec+: value },
      spec+: {
        withMetadata(value): { spec+: { metadata: value } },
        withMetadataMixin(value): { spec+: { metadata+: value } },
        metadata+: {
          withAnnotations(value): { spec+: { metadata+: { annotations: value } } },
          withAnnotationsMixin(value): { spec+: { metadata+: { annotations+: value } } },
          withLabels(value): { spec+: { metadata+: { labels: value } } },
          withLabelsMixin(value): { spec+: { metadata+: { labels+: value } } },
        },
        withProbe(value): { spec+: { probe: value } },
        withProbeMixin(value): { spec+: { probe+: value } },
        probe+: {
          withExec(value): { spec+: { probe+: { exec: value } } },
          withExecMixin(value): { spec+: { probe+: { exec+: value } } },
          exec+: {
            command+: { newString(value): value },
            withCommand(value): { spec+: { probe+: { exec+: { command: if std.isArray(value) then value else [value] } } } },
            withCommandMixin(value): { spec+: { probe+: { exec+: { command+: if std.isArray(value) then value else [value] } } } },
          },
          withFailureThreshold(value): { spec+: { probe+: { failureThreshold: value } } },
          withHttpGet(value): { spec+: { probe+: { httpGet: value } } },
          withHttpGetMixin(value): { spec+: { probe+: { httpGet+: value } } },
          httpGet+: {
            withHost(value): { spec+: { probe+: { httpGet+: { host: value } } } },
            httpHeaders+: {
              withName(value): { name: value },
              withValue(value): { value: value },
            },
            withHttpHeaders(value): { spec+: { probe+: { httpGet+: { httpHeaders: if std.isArray(value) then value else [value] } } } },
            withHttpHeadersMixin(value): { spec+: { probe+: { httpGet+: { httpHeaders+: if std.isArray(value) then value else [value] } } } },
            withPath(value): { spec+: { probe+: { httpGet+: { path: value } } } },
            withPort(value): { spec+: { probe+: { httpGet+: { port: value } } } },
            withScheme(value): { spec+: { probe+: { httpGet+: { scheme: value } } } },
          },
          withInitialDelaySeconds(value): { spec+: { probe+: { initialDelaySeconds: value } } },
          withPeriodSeconds(value): { spec+: { probe+: { periodSeconds: value } } },
          withSuccessThreshold(value): { spec+: { probe+: { successThreshold: value } } },
          withTcpSocket(value): { spec+: { probe+: { tcpSocket: value } } },
          withTcpSocketMixin(value): { spec+: { probe+: { tcpSocket+: value } } },
          tcpSocket+: {
            withHost(value): { spec+: { probe+: { tcpSocket+: { host: value } } } },
            withPort(value): { spec+: { probe+: { tcpSocket+: { port: value } } } },
          },
          withTimeoutSeconds(value): { spec+: { probe+: { timeoutSeconds: value } } },
        },
        withTemplate(value): { spec+: { template: value } },
        withTemplateMixin(value): { spec+: { template+: value } },
        template+: {
          withAddress(value): { spec+: { template+: { address: value } } },
          withLabels(value): { spec+: { template+: { labels: value } } },
          withLabelsMixin(value): { spec+: { template+: { labels+: value } } },
          withLocality(value): { spec+: { template+: { locality: value } } },
          withNetwork(value): { spec+: { template+: { network: value } } },
          withPorts(value): { spec+: { template+: { ports: value } } },
          withPortsMixin(value): { spec+: { template+: { ports+: value } } },
          withServiceAccount(value): { spec+: { template+: { serviceAccount: value } } },
          withWeight(value): { spec+: { template+: { weight: value } } },
        },
      },
      withStatus(value): { status: value },
      withStatusMixin(value): { status+: value },
    },
  } },
} {
  networking+: { v1alpha3+: { workloadGroup+: {
    new(name):
      self.withApiVersion('networking.istio.io/v1alpha3')
      + self.withKind('WorkloadGroup')
      + self.metadata.withName(name),
  } } },
}
